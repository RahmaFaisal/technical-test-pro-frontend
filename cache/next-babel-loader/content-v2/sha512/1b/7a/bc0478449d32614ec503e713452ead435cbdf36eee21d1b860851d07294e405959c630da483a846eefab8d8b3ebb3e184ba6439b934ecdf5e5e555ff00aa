{"ast":null,"code":"import { createAsyncThunk, createEntityAdapter, createSlice } from '@reduxjs/toolkit';\nimport config from 'config';\nimport { parseIds } from 'store/utils';\nconst SERVER_API_ENDPOINT = config.get('SERVER_API_ENDPOING', '/api');\nexport const getPractitioners = createAsyncThunk('getPractitioners', async () => {\n  const response = await fetch(`${SERVER_API_ENDPOINT}/practitioners`);\n  const parsedResponse = await response.json();\n  return parseIds(parsedResponse);\n});\nconst practitionerAdapter = createEntityAdapter({});\nexport const practitionersSelectors = practitionerAdapter.getSelectors();\nconst practitionerSlice = createSlice({\n  name: 'practitioners',\n  initialState: practitionerAdapter.getInitialState({\n    loading: false,\n    error: null,\n    filterValuePractitioner: ''\n  }),\n  reducers: {\n    filterPractitioners(state, action) {\n      state.filterValuePractitioner = action.payload;\n    }\n\n  },\n  extraReducers: builder => {\n    builder.addCase(getPractitioners.pending, state => {\n      state.loading = true;\n    });\n    builder.addCase(getPractitioners.fulfilled, (state, action) => {\n      practitionerAdapter.setAll(state, action.payload);\n      state.error = null;\n      state.loading = false;\n    });\n    builder.addCase(getPractitioners.rejected, (state, action) => {\n      state.error = action.error;\n      state.loading = false;\n    });\n  }\n});\nlet filterPractitionersAction = practitionerSlice.actions.filterPractitioners;\nexport { filterPractitionersAction };\nexport default practitionerSlice;","map":null,"metadata":{},"sourceType":"module"}
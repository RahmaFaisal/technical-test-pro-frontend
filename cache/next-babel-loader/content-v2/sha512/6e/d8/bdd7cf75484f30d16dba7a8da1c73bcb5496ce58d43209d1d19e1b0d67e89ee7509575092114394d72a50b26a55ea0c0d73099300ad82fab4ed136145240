{"ast":null,"code":"import _regeneratorRuntime from \"/home/rahma/Documents/rahma/technical-test-pro-frontend/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/rahma/Documents/rahma/technical-test-pro-frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { createAsyncThunk, createEntityAdapter, createSlice } from '@reduxjs/toolkit';\nimport config from 'config';\nimport { parseIds } from 'store/utils';\nvar SERVER_API_ENDPOINT = config.get('SERVER_API_ENDPOING', '/api');\nexport var getPatients = createAsyncThunk('getPatients ', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n  var response, parsedResponse;\n  return _regeneratorRuntime.wrap(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return fetch(\"\".concat(SERVER_API_ENDPOINT, \"/patients\"));\n\n        case 2:\n          response = _context.sent;\n          _context.next = 5;\n          return response.json();\n\n        case 5:\n          parsedResponse = _context.sent;\n          return _context.abrupt(\"return\", parseIds(parsedResponse));\n\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _callee);\n})));\nvar patientAdapter = createEntityAdapter({});\nexport var patientsSelectors = patientAdapter.getSelectors();\nvar patientSlice = createSlice({\n  name: 'patients',\n  initialState: patientAdapter.getInitialState({\n    loading: false,\n    error: null,\n    filterPatient: ''\n  }),\n  reducers: {\n    filterPatient: function filterPatient(state, action) {\n      state.filterPatient = action.payload;\n    }\n  },\n  extraReducers: function extraReducers(builder) {\n    builder.addCase(getPatients.pending, function (state) {\n      state.loading = true;\n    });\n    builder.addCase(getPatients.fulfilled, function (state, action) {\n      patientAdapter.setAll(state, action.payload);\n      state.error = null;\n      state.loading = false;\n    });\n    builder.addCase(getPatients.rejected, function (state, action) {\n      state.error = action.error;\n      state.loading = false;\n    });\n  }\n});\nvar filterPatientAction = patientSlice.actions.filterPatient;\nexport { filterPatientAction };\nexport default patientSlice;","map":null,"metadata":{},"sourceType":"module"}
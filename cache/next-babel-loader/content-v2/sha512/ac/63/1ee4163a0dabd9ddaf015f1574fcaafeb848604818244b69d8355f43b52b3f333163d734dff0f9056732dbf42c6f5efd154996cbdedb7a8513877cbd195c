{"ast":null,"code":"import _regeneratorRuntime from \"/home/rahma/Documents/rahma/technical-test-pro-frontend/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/rahma/Documents/rahma/technical-test-pro-frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { createAsyncThunk, createEntityAdapter, createSlice } from '@reduxjs/toolkit';\nimport config from 'config';\nimport { parseIds } from 'store/utils';\nvar SERVER_API_ENDPOINT = config.get('SERVER_API_ENDPOING', '/api');\nexport var getTimeSlots = createAsyncThunk('getTimeSlots', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n  var response, parsedResponse;\n  return _regeneratorRuntime.wrap(function _callee$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return fetch(\"\".concat(SERVER_API_ENDPOINT, \"/timeslots\"));\n\n        case 2:\n          response = _context.sent;\n          _context.next = 5;\n          return response.json();\n\n        case 5:\n          parsedResponse = _context.sent;\n          return _context.abrupt(\"return\", parseIds(parsedResponse));\n\n        case 7:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _callee);\n})));\nvar timeslotsAdapter = createEntityAdapter({\n  sortComparer: function sortComparer(a, b) {\n    return new Date(a.startDate).getTime() - new Date(b.startDate).getTime();\n  }\n});\nexport var timeslotsSelectors = timeslotsAdapter.getSelectors();\nvar timeslotsSlice = createSlice({\n  name: 'timeslots',\n  initialState: timeslotsAdapter.getInitialState({\n    loading: false,\n    error: null\n  }),\n  reducers: {},\n  extraReducers: function extraReducers(builder) {\n    builder.addCase(getTimeSlots.pending, function (state) {\n      state.loading = true;\n    });\n    builder.addCase(getTimeSlots.fulfilled, function (state, action) {\n      timeslotsAdapter.setAll(state, action.payload);\n      state.error = null;\n      state.loading = false;\n    });\n    builder.addCase(getTimeSlots.rejected, function (state, action) {\n      state.error = action.error;\n      state.loading = false;\n    });\n  }\n});\nexport default timeslotsSlice;","map":{"version":3,"sources":["/home/rahma/Documents/rahma/technical-test-pro-frontend/src/store/timeslots.ts"],"names":["createAsyncThunk","createEntityAdapter","createSlice","config","parseIds","SERVER_API_ENDPOINT","get","getTimeSlots","fetch","response","json","parsedResponse","timeslotsAdapter","sortComparer","a","b","Date","startDate","getTime","timeslotsSelectors","getSelectors","timeslotsSlice","name","initialState","getInitialState","loading","error","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","setAll","payload","rejected"],"mappings":";;AACA,SACEA,gBADF,EAEEC,mBAFF,EAGEC,WAHF,QAIO,kBAJP;AAKA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,QAAT,QAAyB,aAAzB;AAEA,IAAMC,mBAAmB,GAAGF,MAAM,CAACG,GAAP,CAAW,qBAAX,EAAkC,MAAlC,CAA5B;AAEA,OAAO,IAAMC,YAAY,GAAGP,gBAAgB,CAAC,cAAD,wEAAiB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBACpCQ,KAAK,WAAIH,mBAAJ,gBAD+B;;AAAA;AACrDI,UAAAA,QADqD;AAAA;AAAA,iBAE9BA,QAAQ,CAACC,IAAT,EAF8B;;AAAA;AAErDC,UAAAA,cAFqD;AAAA,2CAGpDP,QAAQ,CAACO,cAAD,CAH4C;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAjB,GAArC;AAMP,IAAMC,gBAAgB,GAAGX,mBAAmB,CAAW;AACrDY,EAAAA,YAAY,EAAE,sBAACC,CAAD,EAAIC,CAAJ;AAAA,WACZ,IAAIC,IAAJ,CAASF,CAAC,CAACG,SAAX,EAAsBC,OAAtB,KAAkC,IAAIF,IAAJ,CAASD,CAAC,CAACE,SAAX,EAAsBC,OAAtB,EADtB;AAAA;AADuC,CAAX,CAA5C;AAKA,OAAO,IAAMC,kBAAkB,GAAGP,gBAAgB,CAACQ,YAAjB,EAA3B;AAEP,IAAMC,cAAc,GAAGnB,WAAW,CAAC;AACjCoB,EAAAA,IAAI,EAAE,WAD2B;AAEjCC,EAAAA,YAAY,EAAEX,gBAAgB,CAACY,eAAjB,CAAiC;AAC7CC,IAAAA,OAAO,EAAE,KADoC;AAE7CC,IAAAA,KAAK,EAAE;AAFsC,GAAjC,CAFmB;AAMjCC,EAAAA,QAAQ,EAAE,EANuB;AAOjCC,EAAAA,aAAa,EAAE,uBAACC,OAAD,EAAa;AAC1BA,IAAAA,OAAO,CAACC,OAAR,CAAgBvB,YAAY,CAACwB,OAA7B,EAAsC,UAACC,KAAD,EAAW;AAC/CA,MAAAA,KAAK,CAACP,OAAN,GAAgB,IAAhB;AACD,KAFD;AAGAI,IAAAA,OAAO,CAACC,OAAR,CAAgBvB,YAAY,CAAC0B,SAA7B,EAAwC,UAACD,KAAD,EAAQE,MAAR,EAAmB;AACzDtB,MAAAA,gBAAgB,CAACuB,MAAjB,CAAwBH,KAAxB,EAA+BE,MAAM,CAACE,OAAtC;AACAJ,MAAAA,KAAK,CAACN,KAAN,GAAc,IAAd;AACAM,MAAAA,KAAK,CAACP,OAAN,GAAgB,KAAhB;AACD,KAJD;AAKAI,IAAAA,OAAO,CAACC,OAAR,CAAgBvB,YAAY,CAAC8B,QAA7B,EAAuC,UAACL,KAAD,EAAQE,MAAR,EAAmB;AACxDF,MAAAA,KAAK,CAACN,KAAN,GAAcQ,MAAM,CAACR,KAArB;AACAM,MAAAA,KAAK,CAACP,OAAN,GAAgB,KAAhB;AACD,KAHD;AAID;AApBgC,CAAD,CAAlC;AAuBA,eAAeJ,cAAf","sourcesContent":["import { Timeslot } from '@prisma/client';\nimport {\n  createAsyncThunk,\n  createEntityAdapter,\n  createSlice,\n} from '@reduxjs/toolkit';\nimport config from 'config';\nimport { parseIds } from 'store/utils';\n\nconst SERVER_API_ENDPOINT = config.get('SERVER_API_ENDPOING', '/api');\n\nexport const getTimeSlots = createAsyncThunk('getTimeSlots', async () => {\n  const response = await fetch(`${SERVER_API_ENDPOINT}/timeslots`);\n  const parsedResponse = await response.json();\n  return parseIds(parsedResponse) as Timeslot[];\n});\n\nconst timeslotsAdapter = createEntityAdapter<Timeslot>({\n  sortComparer: (a, b) =>\n    new Date(a.startDate).getTime() - new Date(b.startDate).getTime(),\n});\n\nexport const timeslotsSelectors = timeslotsAdapter.getSelectors();\n\nconst timeslotsSlice = createSlice({\n  name: 'timeslots',\n  initialState: timeslotsAdapter.getInitialState({\n    loading: false,\n    error: null,\n  }),\n  reducers: {},\n  extraReducers: (builder) => {\n    builder.addCase(getTimeSlots.pending, (state) => {\n      state.loading = true;\n    });\n    builder.addCase(getTimeSlots.fulfilled, (state, action) => {\n      timeslotsAdapter.setAll(state, action.payload);\n      state.error = null;\n      state.loading = false;\n    });\n    builder.addCase(getTimeSlots.rejected, (state, action) => {\n      state.error = action.error;\n      state.loading = false;\n    });\n  },\n});\n\nexport default timeslotsSlice;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _regeneratorRuntime from \"/home/rahma/Documents/rahma/technical-test-pro-frontend/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/rahma/Documents/rahma/technical-test-pro-frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"/home/rahma/Documents/rahma/technical-test-pro-frontend/src/components/AvailabilitiesList.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { Field, useFormikContext } from 'formik';\nimport config from 'config';\nimport { formatDateRange } from 'utils/date';\nimport { CircularProgress } from '@material-ui/core';\nvar SERVER_API_ENDPOINT = config.get('SERVER_API_ENDPOING', '/api');\nexport default function AvailabilitiesList(props) {\n  _s();\n\n  var _this = this;\n\n  var availabilities = props.availabilities,\n      setAvailabilities = props.setAvailabilities;\n  var formik = useFormikContext();\n\n  var getAvailabilities = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var response, parsedResponse;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return fetch(\"\".concat(SERVER_API_ENDPOINT, \"/availabilities?practitionerId=\").concat(formik.values.practitionerId));\n\n            case 2:\n              response = _context.sent;\n              _context.next = 5;\n              return response.json();\n\n            case 5:\n              parsedResponse = _context.sent;\n              setAvailabilities(parsedResponse);\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function getAvailabilities() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    setAvailabilities([]);\n    formik.setFieldValue('availabilityId', '');\n    if (formik.values.practitionerId) getAvailabilities();\n  }, [formik.values.practitionerId]);\n  var showList = availabilities.length || formik.values.practitionerId === '';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: showList ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"avList\",\n      children: availabilities.map(function (availability) {\n        return /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(Field, {\n            type: \"radio\",\n            name: \"availabilityId\",\n            value: availability.id.toString()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 17\n          }, _this), formatDateRange({\n            from: new Date(availability.startDate),\n            to: new Date(availability.endDate)\n          })]\n        }, availability.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 15\n        }, _this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}\n\n_s(AvailabilitiesList, \"PHOrwJrNpyb8NZg/LGMm2IWlZlQ=\", false, function () {\n  return [useFormikContext];\n});\n\n_c = AvailabilitiesList;\n\nvar _c;\n\n$RefreshReg$(_c, \"AvailabilitiesList\");","map":{"version":3,"sources":["/home/rahma/Documents/rahma/technical-test-pro-frontend/src/components/AvailabilitiesList.tsx"],"names":["React","useEffect","Field","useFormikContext","config","formatDateRange","CircularProgress","SERVER_API_ENDPOINT","get","AvailabilitiesList","props","availabilities","setAvailabilities","formik","getAvailabilities","fetch","values","practitionerId","response","json","parsedResponse","setFieldValue","showList","length","map","availability","id","toString","from","Date","startDate","to","endDate"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAA2C,OAA3C;AACA,SAASC,KAAT,EAAgBC,gBAAhB,QAAwC,QAAxC;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,eAAT,QAAgC,YAAhC;AAGA,SAASC,gBAAT,QAAiC,mBAAjC;AAEA,IAAMC,mBAAmB,GAAGH,MAAM,CAACI,GAAP,CAAW,qBAAX,EAAkC,MAAlC,CAA5B;AAOA,eAAe,SAASC,kBAAT,CAA4BC,KAA5B,EAA0C;AAAA;;AAAA;;AAAA,MAC/CC,cAD+C,GACTD,KADS,CAC/CC,cAD+C;AAAA,MAC/BC,iBAD+B,GACTF,KADS,CAC/BE,iBAD+B;AAEvD,MAAMC,MAAM,GAAGV,gBAAgB,EAA/B;;AAEA,MAAMW,iBAAiB;AAAA,wEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACDC,KAAK,WACvBR,mBADuB,4CAC8BM,MAAM,CAACG,MAAP,CAAcC,cAD5C,EADJ;;AAAA;AAClBC,cAAAA,QADkB;AAAA;AAAA,qBAIKA,QAAQ,CAACC,IAAT,EAJL;;AAAA;AAIlBC,cAAAA,cAJkB;AAKxBR,cAAAA,iBAAiB,CAACQ,cAAD,CAAjB;;AALwB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAH;;AAAA,oBAAjBN,iBAAiB;AAAA;AAAA;AAAA,KAAvB;;AAQAb,EAAAA,SAAS,CAAC,YAAM;AACdW,IAAAA,iBAAiB,CAAC,EAAD,CAAjB;AACAC,IAAAA,MAAM,CAACQ,aAAP,CAAqB,gBAArB,EAAuC,EAAvC;AACA,QAAIR,MAAM,CAACG,MAAP,CAAcC,cAAlB,EAAkCH,iBAAiB;AACpD,GAJQ,EAIN,CAACD,MAAM,CAACG,MAAP,CAAcC,cAAf,CAJM,CAAT;AAMA,MAAIK,QAAQ,GAACX,cAAc,CAACY,MAAf,IAAyBV,MAAM,CAACG,MAAP,CAAcC,cAAd,KAA+B,EAArE;AACA,sBACE;AAAA,cACGK,QAAQ,gBACP;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA,gBACGX,cAAc,CAACa,GAAf,CAAmB,UAACC,YAAD,EAAkB;AACpC,4BACE;AAAA,kCACE,QAAC,KAAD;AACE,YAAA,IAAI,EAAC,OADP;AAEE,YAAA,IAAI,EAAC,gBAFP;AAGE,YAAA,KAAK,EAAEA,YAAY,CAACC,EAAb,CAAgBC,QAAhB;AAHT;AAAA;AAAA;AAAA;AAAA,mBADF,EAMGtB,eAAe,CAAC;AACfuB,YAAAA,IAAI,EAAE,IAAIC,IAAJ,CAASJ,YAAY,CAACK,SAAtB,CADS;AAEfC,YAAAA,EAAE,EAAE,IAAIF,IAAJ,CAASJ,YAAY,CAACO,OAAtB;AAFW,WAAD,CANlB;AAAA,WAAYP,YAAY,CAACC,EAAzB;AAAA;AAAA;AAAA;AAAA,iBADF;AAaD,OAdA;AADH;AAAA;AAAA;AAAA;AAAA,YADO,gBAmBP,QAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AApBJ;AAAA;AAAA;AAAA;AAAA,UADF;AAyBD;;GA5CuBjB,kB;UAEPN,gB;;;KAFOM,kB","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Field, useFormikContext } from 'formik';\r\nimport config from 'config';\r\nimport { formatDateRange } from 'utils/date';\r\nimport { InitValues } from 'consts/initValues';\r\nimport { Availability } from './AppointmentForm';\r\nimport { CircularProgress } from '@material-ui/core';\r\n\r\nconst SERVER_API_ENDPOINT = config.get('SERVER_API_ENDPOING', '/api');\r\n\r\ntype Props = {\r\n  availabilities: Availability[];\r\n  setAvailabilities: (list: Availability[]) => void;\r\n};\r\n\r\nexport default function AvailabilitiesList(props: Props) {\r\n  const { availabilities, setAvailabilities } = props;\r\n  const formik = useFormikContext<InitValues>();\r\n\r\n  const getAvailabilities = async () => {\r\n    const response = await fetch(\r\n      `${SERVER_API_ENDPOINT}/availabilities?practitionerId=${formik.values.practitionerId}`,\r\n    );\r\n    const parsedResponse = await response.json();\r\n    setAvailabilities(parsedResponse);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setAvailabilities([]);\r\n    formik.setFieldValue('availabilityId', '');\r\n    if (formik.values.practitionerId) getAvailabilities();\r\n  }, [formik.values.practitionerId]);\r\n\r\n  let showList=availabilities.length || formik.values.practitionerId==='' \r\n  return (\r\n    <div>\r\n      {showList ? (\r\n        <div className=\"avList\">\r\n          {availabilities.map((availability) => {\r\n            return (\r\n              <label key={availability.id}>\r\n                <Field\r\n                  type=\"radio\"\r\n                  name=\"availabilityId\"\r\n                  value={availability.id.toString()}\r\n                />\r\n                {formatDateRange({\r\n                  from: new Date(availability.startDate),\r\n                  to: new Date(availability.endDate),\r\n                })}\r\n              </label>\r\n            );\r\n          })}\r\n        </div>\r\n      ) : (\r\n        <CircularProgress />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
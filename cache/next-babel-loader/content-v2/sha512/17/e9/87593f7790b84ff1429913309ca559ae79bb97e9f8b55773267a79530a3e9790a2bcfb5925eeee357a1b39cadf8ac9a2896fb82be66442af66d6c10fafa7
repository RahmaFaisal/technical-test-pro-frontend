{"ast":null,"code":"import _defineProperty from \"/home/rahma/Documents/rahma/technical-test-pro-frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { useEffect, useState, useMemo } from 'react';\nimport { Checkbox, Accordion, AccordionSummary, AccordionDetails } from '@material-ui/core';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport DoneAllIcon from '@material-ui/icons/DoneAll';\n\nvar TaskList = function TaskList(props) {\n  var tasks = props.tasks,\n      name = props.name,\n      title = props.title,\n      onChange = props.onChange,\n      onComplete = props.onComplete,\n      _props$expected = props.expected,\n      expected = _props$expected === void 0 ? props.tasks.length : _props$expected;\n\n  var _useState = useState({}),\n      localForm = _useState[0],\n      setLocalForm = _useState[1];\n\n  useEffect(function () {\n    var existingLocalForm = localStorage.getItem(name);\n\n    if (existingLocalForm) {\n      setLocalForm(JSON.parse(existingLocalForm));\n    } else {\n      localStorage.setItem(name, JSON.stringify({}));\n    }\n  }, []);\n  useEffect(function () {\n    localStorage.setItem(name, JSON.stringify(localForm));\n    onChange === null || onChange === void 0 ? void 0 : onChange();\n  }, [localForm]);\n  var numberOfAchievedTasks = useMemo(function () {\n    return Object.keys(localForm).filter(function (goal) {\n      return localForm[goal] === true;\n    }).length;\n  }, [localForm]);\n  var isAchievedAllTasks = useMemo(function () {\n    return numberOfAchievedTasks >= expected;\n  }, [numberOfAchievedTasks, expected]);\n  useEffect(function () {\n    onComplete === null || onComplete === void 0 ? void 0 : onComplete(isAchievedAllTasks);\n  }, [isAchievedAllTasks]);\n  return /*#__PURE__*/_jsxs(Accordion, {\n    datacy: name,\n    children: [/*#__PURE__*/_jsx(AccordionSummary, {\n      expandIcon: /*#__PURE__*/_jsx(ExpandMoreIcon, {}),\n      children: /*#__PURE__*/_jsxs(\"h3\", {\n        children: [title, ' ', /*#__PURE__*/_jsxs(\"span\", {\n          children: [numberOfAchievedTasks, \"/\", expected]\n        }), ' ', isAchievedAllTasks && /*#__PURE__*/_jsx(DoneAllIcon, {})]\n      })\n    }), /*#__PURE__*/_jsx(AccordionDetails, {\n      children: /*#__PURE__*/_jsx(\"ul\", {\n        children: tasks.map(function (instruction, i) {\n          var htmlFor = \"\".concat(name, \"-\").concat(i);\n          var currentValue = !!(localForm !== null && localForm !== void 0 && localForm[htmlFor]);\n          return /*#__PURE__*/_jsxs(\"li\", {\n            children: [/*#__PURE__*/_jsx(Checkbox, {\n              id: htmlFor,\n              name: htmlFor,\n              checked: currentValue,\n              onChange: function onChange() {\n                setLocalForm(function (prevState) {\n                  return _objectSpread(_objectSpread({}, prevState), {}, _defineProperty({}, htmlFor, !currentValue));\n                });\n              },\n              color: \"primary\"\n            }), /*#__PURE__*/_jsx(\"label\", {\n              htmlFor: htmlFor,\n              children: instruction\n            })]\n          }, i);\n        })\n      })\n    })]\n  });\n};\n\nexport default TaskList;","map":null,"metadata":{},"sourceType":"module"}
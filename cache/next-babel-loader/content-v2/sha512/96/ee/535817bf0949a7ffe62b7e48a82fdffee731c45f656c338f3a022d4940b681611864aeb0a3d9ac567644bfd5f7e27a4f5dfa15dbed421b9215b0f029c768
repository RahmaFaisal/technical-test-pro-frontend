{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport _regeneratorRuntime from \"/home/rahma/Documents/rahma/technical-test-pro-frontend/node_modules/next/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/home/rahma/Documents/rahma/technical-test-pro-frontend/node_modules/next/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport React, { useEffect } from 'react';\nimport { Field, useFormikContext } from 'formik';\nimport config from 'config';\nimport { formatDateRange } from 'utils/date';\nimport { CircularProgress } from '@material-ui/core';\nvar SERVER_API_ENDPOINT = config.get('SERVER_API_ENDPOING', '/api');\nexport default function AvailabilitiesList(props) {\n  var availabilities = props.availabilities,\n      setAvailabilities = props.setAvailabilities;\n  var formik = useFormikContext();\n\n  var getAvailabilities = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var response, parsedResponse;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return fetch(\"\".concat(SERVER_API_ENDPOINT, \"/availabilities?practitionerId=\").concat(formik.values.practitionerId));\n\n            case 2:\n              response = _context.sent;\n              _context.next = 5;\n              return response.json();\n\n            case 5:\n              parsedResponse = _context.sent;\n              setAvailabilities(parsedResponse);\n\n            case 7:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function getAvailabilities() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  useEffect(function () {\n    setAvailabilities([]);\n    formik.setFieldValue('availabilityId', '');\n    if (formik.values.practitionerId) getAvailabilities();\n  }, [formik.values.practitionerId]);\n  var showList = availabilities.length || formik.values.practitionerId === '';\n  return /*#__PURE__*/_jsx(\"div\", {\n    children: showList ? /*#__PURE__*/_jsx(\"div\", {\n      className: \"avList\",\n      children: availabilities.map(function (availability) {\n        return /*#__PURE__*/_jsxs(\"label\", {\n          children: [/*#__PURE__*/_jsx(Field, {\n            type: \"radio\",\n            name: \"availabilityId\",\n            value: availability.id.toString()\n          }), formatDateRange({\n            from: new Date(availability.startDate),\n            to: new Date(availability.endDate)\n          })]\n        }, availability.id);\n      })\n    }) : /*#__PURE__*/_jsx(CircularProgress, {})\n  });\n}","map":null,"metadata":{},"sourceType":"module"}
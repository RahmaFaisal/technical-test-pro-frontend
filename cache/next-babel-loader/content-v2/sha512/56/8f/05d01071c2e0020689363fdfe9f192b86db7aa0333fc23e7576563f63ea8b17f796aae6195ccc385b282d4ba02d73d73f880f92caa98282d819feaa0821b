{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/rahma/Documents/rahma/technical-test-pro-frontend/src/components/AppointmentList.tsx\";\nimport { Button, Card, CardActions, CardContent, CircularProgress, FormControl, InputLabel, OutlinedInput, Typography } from '@material-ui/core';\nimport { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport SearchIcon from '@material-ui/icons/Search';\nimport { filterAppointmentAction } from 'store/appointment';\nimport { patientsSelectors } from 'store/patients';\nimport { practitionersSelectors } from 'store/practitioners';\nimport { formatDateRange } from 'utils/date';\nimport { deleteAppointment } from 'utils/formatAppointmentRequest';\nimport { getAppointments } from '../store/appointment';\nimport Alert from '@material-ui/lab/Alert';\nimport { filteredApointment } from 'utils/filterSelector';\n\nconst AppointmentList = () => {\n  const dispatch = useDispatch();\n  const state = useSelector(state => state);\n  const appointments = filteredApointment(state);\n  const LoadingAppointment = useSelector(state => state.appointments.loading);\n  const LoadingPatients = useSelector(state => state.patients.loading);\n  const LoadingPractitioners = useSelector(state => state.practitioners.loading);\n  const practitioners = useSelector(state => state.practitioners);\n\n  const getPractitById = id => practitionersSelectors.selectById(practitioners, id);\n\n  const patients = useSelector(state => state.patients);\n\n  const getPatientById = id => patientsSelectors.selectById(patients, id);\n\n  const {\n    0: showSuccess,\n    1: setShowSuccess\n  } = useState(false);\n  useEffect(() => {\n    dispatch(getAppointments());\n  }, []);\n\n  const refreshList = () => {\n    setShowSuccess(true);\n    dispatch(getAppointments());\n  };\n\n  const onDelete = id => {\n    deleteAppointment(id, refreshList);\n  };\n\n  useEffect(() => {\n    let hideAlert;\n\n    if (showSuccess) {\n      hideAlert = setTimeout(() => {\n        setShowSuccess(false);\n      }, 2000);\n    }\n\n    return () => {\n      clearTimeout(hideAlert);\n    };\n  }, [showSuccess]);\n\n  const Appointments = () => {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: appointments.map(appointment => {\n        const practitioner = getPractitById(appointment.practitionerId);\n        const patient = getPatientById(appointment.patientId);\n        return /*#__PURE__*/_jsxDEV(Card, {\n          className: \"appoint\",\n          datacy: \"appoint\",\n          children: /*#__PURE__*/_jsxDEV(CardContent, {\n            children: [/*#__PURE__*/_jsxDEV(Typography, {\n              variant: \"h6\",\n              className: \"title\",\n              children: formatDateRange({\n                from: new Date(appointment.startDate),\n                to: new Date(appointment.endDate)\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 87,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              children: [\"Practitioner Name : \", practitioner.firstName, ' ', practitioner.lastName]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 93,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              children: [\"Practitioner speciality : \", practitioner.speciality, ' ']\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 97,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(Typography, {\n              children: [\"Patient Name : \", patient.firstName, \" \", patient.lastName]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 100,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(CardActions, {\n              className: \"actionContainer\",\n              children: /*#__PURE__*/_jsxDEV(Button, {\n                onClick: () => {\n                  onDelete(appointment.id);\n                },\n                variant: \"contained\",\n                className: \"btn\",\n                color: \"secondary\",\n                style: {\n                  color: 'red'\n                },\n                size: \"small\",\n                startIcon: /*#__PURE__*/_jsxDEV(DeleteIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 113,\n                  columnNumber: 32\n                }, this),\n                children: \"Delete\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 104,\n                columnNumber: 19\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 103,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 86,\n            columnNumber: 15\n          }, this)\n        }, appointment.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }, this);\n      })\n    }, void 0, false);\n  };\n\n  const showLoading = LoadingAppointment || LoadingPatients || LoadingPractitioners;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: showLoading ? /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          height: 50,\n          width: '90%',\n          margin: 'auto'\n        },\n        children: showSuccess && /*#__PURE__*/_jsxDEV(Alert, {\n          onClose: () => setShowSuccess(false),\n          severity: \"success\",\n          children: \"Appointment has been deleted successfully\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(FormControl, {\n        size: \"small\",\n        variant: \"outlined\",\n        fullWidth: true,\n        style: {\n          margin: '10px 0'\n        },\n        children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n          htmlFor: \"outlined-adornment-amount\",\n          children: \"Practitioner/Patient/speciality/Date\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 154,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(OutlinedInput, {\n          id: \"outlined-adornment-amount\",\n          onChange: e => {\n            dispatch(filterAppointmentAction(e.target.value));\n          },\n          startAdornment: /*#__PURE__*/_jsxDEV(SearchIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 31\n          }, this),\n          labelWidth: 260\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Appointments, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 5\n  }, this);\n};\n\nexport default AppointmentList;","map":{"version":3,"sources":["/home/rahma/Documents/rahma/technical-test-pro-frontend/src/components/AppointmentList.tsx"],"names":["Button","Card","CardActions","CardContent","CircularProgress","FormControl","InputLabel","OutlinedInput","Typography","useEffect","useState","useSelector","useDispatch","DeleteIcon","SearchIcon","filterAppointmentAction","patientsSelectors","practitionersSelectors","formatDateRange","deleteAppointment","getAppointments","Alert","filteredApointment","AppointmentList","dispatch","state","appointments","LoadingAppointment","loading","LoadingPatients","patients","LoadingPractitioners","practitioners","getPractitById","id","selectById","getPatientById","showSuccess","setShowSuccess","refreshList","onDelete","hideAlert","setTimeout","clearTimeout","Appointments","map","appointment","practitioner","practitionerId","patient","patientId","from","Date","startDate","to","endDate","firstName","lastName","speciality","color","showLoading","height","width","margin","e","target","value"],"mappings":"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","sourcesContent":["import {\n  Button,\n  Card,\n  CardActions,\n  CardContent,\n  CircularProgress,\n  FormControl,\n  Grid,\n  InputLabel,\n  OutlinedInput,\n  Typography,\n} from '@material-ui/core';\nimport { useEffect, useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport SearchIcon from '@material-ui/icons/Search';\nimport {\n  appointmentsSelectors,\n  filterAppointmentAction,\n} from 'store/appointment';\nimport { patientsSelectors } from 'store/patients';\nimport { practitionersSelectors } from 'store/practitioners';\nimport { formatDateRange } from 'utils/date';\nimport { deleteAppointment } from 'utils/formatAppointmentRequest';\nimport { getAppointments } from '../store/appointment';\nimport EditorLink from './EditorLink';\nimport Alert from '@material-ui/lab/Alert';\nimport { filteredApointment } from 'utils/filterSelector';\n\nconst AppointmentList = () => {\n  const dispatch = useDispatch();\n\n  const state = useSelector((state) => state);\n  const appointments = filteredApointment(state);\n\n  const LoadingAppointment = useSelector((state) => state.appointments.loading);\n  const LoadingPatients = useSelector((state) => state.patients.loading);\n  const LoadingPractitioners = useSelector(\n    (state) => state.practitioners.loading,\n  );\n\n  const practitioners = useSelector((state) => state.practitioners);\n\n  const getPractitById = (id) =>\n    practitionersSelectors.selectById(practitioners, id);\n\n  const patients = useSelector((state) => state.patients);\n  const getPatientById = (id) => patientsSelectors.selectById(patients, id);\n\n  const [showSuccess, setShowSuccess] = useState(false);\n\n  useEffect(() => {\n    dispatch(getAppointments());\n  }, []);\n\n  const refreshList = () => {\n    setShowSuccess(true);\n    dispatch(getAppointments());\n  };\n\n  const onDelete = (id: number) => {\n    deleteAppointment(id, refreshList);\n  };\n\n  useEffect(() => {\n    let hideAlert;\n    if (showSuccess) {\n      hideAlert = setTimeout(() => {\n        setShowSuccess(false);\n      }, 2000);\n    }\n\n    return () => {\n      clearTimeout(hideAlert);\n    };\n  }, [showSuccess]);\n\n  const Appointments = () => {\n    return (\n      <>\n        {appointments.map((appointment) => {\n          const practitioner = getPractitById(appointment.practitionerId);\n          const patient = getPatientById(appointment.patientId);\n          return (\n            <Card key={appointment.id} className=\"appoint\" datacy=\"appoint\">\n              <CardContent>\n                <Typography variant=\"h6\" className=\"title\">\n                  {formatDateRange({\n                    from: new Date(appointment.startDate),\n                    to: new Date(appointment.endDate),\n                  })}\n                </Typography>\n                <Typography>\n                  Practitioner Name : {practitioner.firstName}{' '}\n                  {practitioner.lastName}\n                </Typography>\n                <Typography>\n                  Practitioner speciality : {practitioner.speciality}{' '}\n                </Typography>\n                <Typography>\n                  Patient Name : {patient.firstName} {patient.lastName}\n                </Typography>\n                <CardActions className=\"actionContainer\">\n                  <Button\n                    onClick={() => {\n                      onDelete(appointment.id);\n                    }}\n                    variant=\"contained\"\n                    className=\"btn\"\n                    color=\"secondary\"\n                    style={{ color: 'red' }}\n                    size=\"small\"\n                    startIcon={<DeleteIcon />}\n                  >\n                    Delete\n                  </Button>\n                </CardActions>\n              </CardContent>\n            </Card>\n          );\n        })}\n      </>\n    );\n  };\n\n  const showLoading =\n    LoadingAppointment || LoadingPatients || LoadingPractitioners;\n\n  return (\n    <div>\n      {/* Edit\n      <EditorLink path=\"src/components/AppointmentList.tsx\">\n        \"src/components/AppointmentForm.tsx\"\n      </EditorLink>{' '}\n      to display the list of appointments. */}\n      {showLoading ? (\n        <CircularProgress />\n      ) : (\n        <div>\n          <div style={{ height: 50, width: '90%', margin: 'auto' }}>\n            {showSuccess && (\n              <Alert onClose={() => setShowSuccess(false)} severity=\"success\">\n                Appointment has been deleted successfully\n              </Alert>\n            )}\n          </div>\n\n          <FormControl\n            size=\"small\"\n            variant=\"outlined\"\n            fullWidth\n            style={{ margin: '10px 0' }}\n          >\n            <InputLabel htmlFor=\"outlined-adornment-amount\">\n              Practitioner/Patient/speciality/Date\n            </InputLabel>\n            <OutlinedInput\n              id=\"outlined-adornment-amount\"\n              onChange={(e) => {\n                dispatch(filterAppointmentAction(e.target.value));\n              }}\n              startAdornment={<SearchIcon />}\n              labelWidth={260}\n            />\n          </FormControl>\n\n          <Appointments />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default AppointmentList;\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { createDraftSafeSelector } from '@reduxjs/toolkit';\nimport { patientsSelectors } from 'store/patients';\nimport { practitionersSelectors } from 'store/practitioners';\nimport { appointmentsSelectors } from 'store/appointment';\nimport { formatDateRange } from './date';\n\nconst patients = state => patientsSelectors.selectAll(state.patients);\n\nconst filterValuePatient = state => state.patients.filterPatient;\n\nconst filteredPatients = createDraftSafeSelector([patients, filterValuePatient], (patients, filterValuePatient) => {\n  if (filterValuePatient) {\n    let list = patients.filter(patient => {\n      let name = patient.firstName + patient.lastName;\n      return name.toLowerCase().includes(filterValuePatient.toLowerCase());\n    });\n    return list;\n  } else {\n    return patients;\n  }\n});\n\nconst practitioners = state => practitionersSelectors.selectAll(state.practitioners);\n\nconst filterValuePractitioner = state => state.practitioners.filterValuePractitioner;\n\nconst filteredPractitioners = createDraftSafeSelector([practitioners, filterValuePractitioner], (practitioners, filterValuePractitioner) => {\n  console.log(filterValuePractitioner);\n\n  if (filterValuePractitioner) {\n    let list = practitioners.filter(({\n      firstName,\n      lastName,\n      speciality\n    }) => {\n      let practValues = Object.values({\n        firstName,\n        lastName,\n        speciality\n      });\n\n      for (let i = 0; i < practValues.length; i++) {\n        if (practValues[i].toLowerCase().includes(filterValuePractitioner.toLowerCase())) {\n          return true;\n        }\n      }\n\n      return false;\n    });\n    return list;\n  } else {\n    return practitioners;\n  }\n});\n\nconst filterValueAppointment = state => state.appointments.filterValueAppointment;\n\nconst appointment = state => appointmentsSelectors.selectAll(state.appointments);\n\nconst practitionersState = state => state.practitioners;\n\nconst patientsState = state => state.patients;\n\nconst getPractitById = (state, id) => practitionersSelectors.selectById(state, id);\n\nconst getPatientById = (state, id) => patientsSelectors.selectById(state, id);\n\nconst filteredApointment = createDraftSafeSelector([appointment, filterValueAppointment, practitionersState, patientsState], (appointment, filterValueAppointment, practitionersState, patientsState) => {\n  if (filterValueAppointment) {\n    let list = appointment.filter(appoint => {\n      let {\n        firstName: patientFirstName,\n        lastName: patientlastName\n      } = getPatientById(patientsState, appoint.patientId);\n      let {\n        firstName,\n        lastName,\n        speciality\n      } = getPractitById(practitionersState, appoint.practitionerId);\n      let date = formatDateRange({\n        from: new Date(appoint.startDate),\n        to: new Date(appoint.endDate)\n      });\n      let SearchObject = {\n        patientFirstName,\n        patientlastName,\n        firstName,\n        lastName,\n        speciality,\n        date\n      };\n      let searchValues = Object.values(SearchObject);\n\n      for (let i = 0; i < searchValues.length; i++) {\n        if (searchValues[i].toLowerCase().includes(filterValueAppointment.toLowerCase())) {\n          return true;\n        }\n      }\n\n      return false;\n    });\n    return list;\n  } else {\n    return appointment;\n  }\n});\nexport { filteredPatients, filteredPractitioners, filteredApointment };","map":{"version":3,"sources":["/home/rahma/Documents/rahma/technical-test-pro-frontend/src/utils/filterSelector.ts"],"names":["createDraftSafeSelector","patientsSelectors","practitionersSelectors","appointmentsSelectors","formatDateRange","patients","state","selectAll","filterValuePatient","filterPatient","filteredPatients","list","filter","patient","name","firstName","lastName","toLowerCase","includes","practitioners","filterValuePractitioner","filteredPractitioners","console","log","speciality","practValues","Object","values","i","length","filterValueAppointment","appointments","appointment","practitionersState","patientsState","getPractitById","id","selectById","getPatientById","filteredApointment","appoint","patientFirstName","patientlastName","patientId","practitionerId","date","from","Date","startDate","to","endDate","SearchObject","searchValues"],"mappings":"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","sourcesContent":["import { createDraftSafeSelector } from '@reduxjs/toolkit';\r\nimport { patientsSelectors } from 'store/patients';\r\nimport { practitionersSelectors } from 'store/practitioners';\r\nimport { appointmentsSelectors } from 'store/appointment';\r\nimport { formatDateRange } from './date';\r\nimport appointments from 'api/appointments';\r\n\r\nconst patients = (state) => patientsSelectors.selectAll(state.patients);\r\nconst filterValuePatient = (state) => state.patients.filterPatient;\r\n\r\nconst filteredPatients = createDraftSafeSelector(\r\n  [patients, filterValuePatient],\r\n  (patients, filterValuePatient) => {\r\n    if (filterValuePatient) {\r\n      let list = patients.filter((patient) => {\r\n        let name = patient.firstName + patient.lastName;\r\n        return name.toLowerCase().includes(filterValuePatient.toLowerCase());\r\n      });\r\n      return list;\r\n    } else {\r\n      return patients;\r\n    }\r\n  },\r\n);\r\n\r\nconst practitioners = (state) =>\r\n  practitionersSelectors.selectAll(state.practitioners);\r\nconst filterValuePractitioner = (state) =>\r\n  state.practitioners.filterValuePractitioner;\r\n\r\nconst filteredPractitioners = createDraftSafeSelector(\r\n  [practitioners, filterValuePractitioner],\r\n  (practitioners, filterValuePractitioner) => {\r\n    console.log(filterValuePractitioner);\r\n    if (filterValuePractitioner) {\r\n      let list = practitioners.filter(({ firstName, lastName, speciality }) => {\r\n        let practValues: string[] = Object.values({\r\n          firstName,\r\n          lastName,\r\n          speciality,\r\n        });\r\n\r\n        for (let i = 0; i < practValues.length; i++) {\r\n          if (\r\n            practValues[i]\r\n              .toLowerCase()\r\n              .includes(filterValuePractitioner.toLowerCase())\r\n          ) {\r\n            return true;\r\n          }\r\n        }\r\n        return false;\r\n      });\r\n      return list;\r\n    } else {\r\n      return practitioners;\r\n    }\r\n  },\r\n);\r\n\r\nconst filterValueAppointment = (state) =>\r\n  state.appointments.filterValueAppointment;\r\nconst appointment = (state) =>\r\n  appointmentsSelectors.selectAll(state.appointments);\r\n\r\nconst practitionersState = (state) => state.practitioners;\r\nconst patientsState = (state) => state.patients;\r\n\r\nconst getPractitById = (state, id) =>\r\n  practitionersSelectors.selectById(state, id);\r\nconst getPatientById = (state, id) => patientsSelectors.selectById(state, id);\r\n\r\nconst filteredApointment = createDraftSafeSelector(\r\n  [appointment, filterValueAppointment, practitionersState, patientsState],\r\n  (appointment, filterValueAppointment, practitionersState, patientsState) => {\r\n    if (filterValueAppointment) {\r\n      let list = appointment.filter((appoint) => {\r\n        let {\r\n          firstName: patientFirstName,\r\n          lastName: patientlastName,\r\n        } = getPatientById(patientsState, appoint.patientId);\r\n\r\n        let { firstName, lastName, speciality } = getPractitById(\r\n          practitionersState,\r\n          appoint.practitionerId,\r\n        );\r\n        let date = formatDateRange({\r\n          from: new Date(appoint.startDate),\r\n          to: new Date(appoint.endDate),\r\n        });\r\n        let SearchObject = {\r\n          patientFirstName,\r\n          patientlastName,\r\n          firstName,\r\n          lastName,\r\n          speciality,\r\n          date,\r\n        };\r\n        let searchValues = Object.values(SearchObject);\r\n        for (let i = 0; i < searchValues.length; i++) {\r\n          if (\r\n            searchValues[i]\r\n              .toLowerCase()\r\n              .includes(filterValueAppointment.toLowerCase())\r\n          ) {\r\n            return true;\r\n          }\r\n        }\r\n        return false;\r\n      });\r\n\r\n      return list;\r\n    } else {\r\n      return appointment;\r\n    }\r\n  },\r\n);\r\n\r\nexport { filteredPatients, filteredPractitioners, filteredApointment };\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport { initValues } from 'consts/initValues';\nimport { filterPractitionersAction, getPractitioners } from 'store/practitioners';\nimport { Button, FormControl, Grid, InputLabel, OutlinedInput } from '@material-ui/core';\nimport SearchIcon from '@material-ui/icons/Search';\nimport Alert from '@material-ui/lab/Alert';\nimport { filterPatientAction, getPatients } from 'store/patients';\nimport { AppointmentSchema } from 'consts/validationSchema';\nimport { addAppointment, getAppointmentRequest } from 'utils/formatAppointmentRequest';\nimport { getAppointments } from 'store/appointment';\nimport AvailabilitiesList from './AvailabilitiesList';\nimport { filteredPatients, filteredPractitioners } from 'utils/filterSelector';\n\nvar AppointmentForm = function AppointmentForm() {\n  var dispatch = useDispatch();\n  var state = useSelector(function (state) {\n    return state;\n  });\n  var practitioners = filteredPractitioners(state);\n  var patients = filteredPatients(state);\n\n  var _useState = useState([]),\n      availabilities = _useState[0],\n      setAvailabilities = _useState[1];\n\n  var _useState2 = useState(false),\n      showSuccess = _useState2[0],\n      setShowSuccess = _useState2[1];\n\n  useEffect(function () {\n    dispatch(getPractitioners());\n    dispatch(getPatients());\n  }, []);\n  useEffect(function () {\n    var hideAlert;\n\n    if (showSuccess) {\n      hideAlert = setTimeout(function () {\n        setShowSuccess(false);\n      }, 2000);\n    }\n\n    return function () {\n      clearTimeout(hideAlert);\n    };\n  }, [showSuccess]);\n\n  var PractitionersList = function PractitionersList() {\n    return /*#__PURE__*/_jsx(_Fragment, {\n      children: practitioners.map(function (practitioner) {\n        return /*#__PURE__*/_jsxs(\"label\", {\n          children: [/*#__PURE__*/_jsx(Field, {\n            type: \"radio\",\n            name: \"practitionerId\",\n            value: practitioner.id.toString()\n          }), \"\".concat(practitioner.firstName, \" \").concat(practitioner.lastName, \"  (\").concat(practitioner.speciality, \")\")]\n        }, practitioner.id);\n      })\n    });\n  };\n\n  var PatientsList = function PatientsList() {\n    return /*#__PURE__*/_jsx(_Fragment, {\n      children: patients.map(function (patient) {\n        return /*#__PURE__*/_jsxs(\"label\", {\n          children: [/*#__PURE__*/_jsx(Field, {\n            type: \"radio\",\n            name: \"patientId\",\n            value: patient.id.toString()\n          }), \"\".concat(patient.firstName, \" (\").concat(patient.lastName, \")\")]\n        }, patient.id);\n      })\n    });\n  };\n\n  var updateAppointmentList = function updateAppointmentList() {\n    setShowSuccess(true);\n    setAvailabilities([]);\n    dispatch(getAppointments());\n  };\n\n  var onSubmit = function onSubmit(values, _ref) {\n    var resetForm = _ref.resetForm;\n    var availabilityId = values.availabilityId,\n        patientId = values.patientId,\n        practitionerId = values.practitionerId;\n\n    var _availabilities$find = availabilities.find(function (date) {\n      return date.id == Number(availabilityId);\n    }),\n        endDate = _availabilities$find.endDate,\n        startDate = _availabilities$find.startDate;\n\n    resetForm();\n    var body = getAppointmentRequest({\n      patientId: patientId,\n      practitionerId: practitionerId,\n      startDate: startDate,\n      endDate: endDate\n    });\n    addAppointment(body, updateAppointmentList);\n  };\n\n  return /*#__PURE__*/_jsxs(\"div\", {\n    children: [/*#__PURE__*/_jsx(\"div\", {\n      style: {\n        height: 50,\n        width: '90%',\n        margin: 'auto'\n      },\n      children: showSuccess && /*#__PURE__*/_jsx(Alert, {\n        onClose: function onClose() {\n          return setShowSuccess(false);\n        },\n        severity: \"success\",\n        children: \"Appointment added successfully\"\n      })\n    }), /*#__PURE__*/_jsx(Formik, {\n      initialValues: initValues,\n      onSubmit: onSubmit,\n      validationSchema: AppointmentSchema,\n      children: /*#__PURE__*/_jsxs(Form, {\n        children: [/*#__PURE__*/_jsxs(\"div\", {\n          className: \"_form\",\n          children: [/*#__PURE__*/_jsxs(Grid, {\n            container: true,\n            direction: \"column\",\n            className: \"list\",\n            id: \"patientlist\",\n            children: [/*#__PURE__*/_jsxs(\"p\", {\n              className: \"title\",\n              children: [\"Patient List\", /*#__PURE__*/_jsx(ErrorMessage, {\n                component: \"span\",\n                name: \"patientId\",\n                className: \"error\"\n              })]\n            }), /*#__PURE__*/_jsxs(FormControl, {\n              size: \"small\",\n              variant: \"outlined\",\n              style: {\n                width: '70%',\n                margin: '10px 0'\n              },\n              children: [/*#__PURE__*/_jsx(InputLabel, {\n                htmlFor: \"outlined-adornment-amount\",\n                children: \"Patient Name\"\n              }), /*#__PURE__*/_jsx(OutlinedInput, {\n                id: \"outlined-adornment-amount\",\n                onChange: function onChange(e) {\n                  dispatch(filterPatientAction(e.target.value));\n                },\n                startAdornment: /*#__PURE__*/_jsx(SearchIcon, {}),\n                labelWidth: 100\n              })]\n            }), /*#__PURE__*/_jsx(PatientsList, {})]\n          }), /*#__PURE__*/_jsxs(Grid, {\n            container: true,\n            direction: \"column\",\n            className: \"list\",\n            id: \"practitionerlist\",\n            children: [/*#__PURE__*/_jsxs(\"p\", {\n              className: \"title\",\n              children: [\"Practitioner List\", /*#__PURE__*/_jsx(ErrorMessage, {\n                component: \"span\",\n                name: \"practitionerId\",\n                className: \"error\"\n              })]\n            }), /*#__PURE__*/_jsxs(FormControl, {\n              size: \"small\",\n              variant: \"outlined\",\n              style: {\n                width: '70%',\n                margin: '10px 0'\n              },\n              children: [/*#__PURE__*/_jsx(InputLabel, {\n                htmlFor: \"outlined-adornment-amount\",\n                children: \"Practitioner/speciality\"\n              }), /*#__PURE__*/_jsx(OutlinedInput, {\n                id: \"outlined-adornment-amount\",\n                onChange: function onChange(e) {\n                  dispatch(filterPractitionersAction(e.target.value));\n                },\n                startAdornment: /*#__PURE__*/_jsx(SearchIcon, {}),\n                labelWidth: 170\n              })]\n            }), /*#__PURE__*/_jsx(PractitionersList, {})]\n          }), /*#__PURE__*/_jsxs(Grid, {\n            container: true,\n            direction: \"column\",\n            className: \"list\",\n            children: [/*#__PURE__*/_jsxs(\"p\", {\n              className: \"title\",\n              children: [\"Appointments List\", /*#__PURE__*/_jsx(ErrorMessage, {\n                component: \"span\",\n                name: \"availabilityId\",\n                className: \"error\"\n              })]\n            }), /*#__PURE__*/_jsx(AvailabilitiesList, {\n              availabilities: availabilities,\n              setAvailabilities: setAvailabilities\n            })]\n          })]\n        }), /*#__PURE__*/_jsx(Grid, {\n          container: true,\n          justify: \"center\",\n          children: /*#__PURE__*/_jsx(Button, {\n            type: \"submit\",\n            variant: \"contained\",\n            className: \"btn\",\n            color: \"primary\",\n            size: \"medium\",\n            children: \"Book\"\n          })\n        })]\n      })\n    })]\n  });\n};\n\nexport default AppointmentForm;","map":null,"metadata":{},"sourceType":"module"}
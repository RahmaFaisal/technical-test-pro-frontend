{"ast":null,"code":"import { createAsyncThunk, createEntityAdapter, createSlice } from '@reduxjs/toolkit';\nimport config from 'config';\nimport { parseIds } from 'store/utils';\nconst SERVER_API_ENDPOINT = config.get('SERVER_API_ENDPOING', '/api');\nexport const getTimeSlots = createAsyncThunk('getTimeSlots', async () => {\n  const response = await fetch(`${SERVER_API_ENDPOINT}/timeslots`);\n  const parsedResponse = await response.json();\n  return parseIds(parsedResponse);\n});\nconst timeslotsAdapter = createEntityAdapter({\n  sortComparer: (a, b) => new Date(a.startDate).getTime() - new Date(b.startDate).getTime()\n});\nexport const timeslotsSelectors = timeslotsAdapter.getSelectors();\nconst timeslotsSlice = createSlice({\n  name: 'timeslots',\n  initialState: timeslotsAdapter.getInitialState({\n    loading: false,\n    error: null\n  }),\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(getTimeSlots.pending, state => {\n      state.loading = true;\n    });\n    builder.addCase(getTimeSlots.fulfilled, (state, action) => {\n      timeslotsAdapter.setAll(state, action.payload);\n      state.error = null;\n      state.loading = false;\n    });\n    builder.addCase(getTimeSlots.rejected, (state, action) => {\n      state.error = action.error;\n      state.loading = false;\n    });\n  }\n});\nexport default timeslotsSlice;","map":{"version":3,"sources":["/home/rahma/Documents/rahma/technical-test-pro-frontend/src/store/timeslots.ts"],"names":["createAsyncThunk","createEntityAdapter","createSlice","config","parseIds","SERVER_API_ENDPOINT","get","getTimeSlots","response","fetch","parsedResponse","json","timeslotsAdapter","sortComparer","a","b","Date","startDate","getTime","timeslotsSelectors","getSelectors","timeslotsSlice","name","initialState","getInitialState","loading","error","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","setAll","payload","rejected"],"mappings":"AACA,SACEA,gBADF,EAEEC,mBAFF,EAGEC,WAHF,QAIO,kBAJP;AAKA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,QAAT,QAAyB,aAAzB;AAEA,MAAMC,mBAAmB,GAAGF,MAAM,CAACG,GAAP,CAAW,qBAAX,EAAkC,MAAlC,CAA5B;AAEA,OAAO,MAAMC,YAAY,GAAGP,gBAAgB,CAAC,cAAD,EAAiB,YAAY;AACvE,QAAMQ,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEJ,mBAAoB,YAAxB,CAA5B;AACA,QAAMK,cAAc,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAA7B;AACA,SAAOP,QAAQ,CAACM,cAAD,CAAf;AACD,CAJ2C,CAArC;AAMP,MAAME,gBAAgB,GAAGX,mBAAmB,CAAW;AACrDY,EAAAA,YAAY,EAAE,CAACC,CAAD,EAAIC,CAAJ,KACZ,IAAIC,IAAJ,CAASF,CAAC,CAACG,SAAX,EAAsBC,OAAtB,KAAkC,IAAIF,IAAJ,CAASD,CAAC,CAACE,SAAX,EAAsBC,OAAtB;AAFiB,CAAX,CAA5C;AAKA,OAAO,MAAMC,kBAAkB,GAAGP,gBAAgB,CAACQ,YAAjB,EAA3B;AAEP,MAAMC,cAAc,GAAGnB,WAAW,CAAC;AACjCoB,EAAAA,IAAI,EAAE,WAD2B;AAEjCC,EAAAA,YAAY,EAAEX,gBAAgB,CAACY,eAAjB,CAAiC;AAC7CC,IAAAA,OAAO,EAAE,KADoC;AAE7CC,IAAAA,KAAK,EAAE;AAFsC,GAAjC,CAFmB;AAMjCC,EAAAA,QAAQ,EAAE,EANuB;AAOjCC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CAACC,OAAR,CAAgBvB,YAAY,CAACwB,OAA7B,EAAuCC,KAAD,IAAW;AAC/CA,MAAAA,KAAK,CAACP,OAAN,GAAgB,IAAhB;AACD,KAFD;AAGAI,IAAAA,OAAO,CAACC,OAAR,CAAgBvB,YAAY,CAAC0B,SAA7B,EAAwC,CAACD,KAAD,EAAQE,MAAR,KAAmB;AACzDtB,MAAAA,gBAAgB,CAACuB,MAAjB,CAAwBH,KAAxB,EAA+BE,MAAM,CAACE,OAAtC;AACAJ,MAAAA,KAAK,CAACN,KAAN,GAAc,IAAd;AACAM,MAAAA,KAAK,CAACP,OAAN,GAAgB,KAAhB;AACD,KAJD;AAKAI,IAAAA,OAAO,CAACC,OAAR,CAAgBvB,YAAY,CAAC8B,QAA7B,EAAuC,CAACL,KAAD,EAAQE,MAAR,KAAmB;AACxDF,MAAAA,KAAK,CAACN,KAAN,GAAcQ,MAAM,CAACR,KAArB;AACAM,MAAAA,KAAK,CAACP,OAAN,GAAgB,KAAhB;AACD,KAHD;AAID;AApBgC,CAAD,CAAlC;AAuBA,eAAeJ,cAAf","sourcesContent":["import { Timeslot } from '@prisma/client';\nimport {\n  createAsyncThunk,\n  createEntityAdapter,\n  createSlice,\n} from '@reduxjs/toolkit';\nimport config from 'config';\nimport { parseIds } from 'store/utils';\n\nconst SERVER_API_ENDPOINT = config.get('SERVER_API_ENDPOING', '/api');\n\nexport const getTimeSlots = createAsyncThunk('getTimeSlots', async () => {\n  const response = await fetch(`${SERVER_API_ENDPOINT}/timeslots`);\n  const parsedResponse = await response.json();\n  return parseIds(parsedResponse) as Timeslot[];\n});\n\nconst timeslotsAdapter = createEntityAdapter<Timeslot>({\n  sortComparer: (a, b) =>\n    new Date(a.startDate).getTime() - new Date(b.startDate).getTime(),\n});\n\nexport const timeslotsSelectors = timeslotsAdapter.getSelectors();\n\nconst timeslotsSlice = createSlice({\n  name: 'timeslots',\n  initialState: timeslotsAdapter.getInitialState({\n    loading: false,\n    error: null,\n  }),\n  reducers: {},\n  extraReducers: (builder) => {\n    builder.addCase(getTimeSlots.pending, (state) => {\n      state.loading = true;\n    });\n    builder.addCase(getTimeSlots.fulfilled, (state, action) => {\n      timeslotsAdapter.setAll(state, action.payload);\n      state.error = null;\n      state.loading = false;\n    });\n    builder.addCase(getTimeSlots.rejected, (state, action) => {\n      state.error = action.error;\n      state.loading = false;\n    });\n  },\n});\n\nexport default timeslotsSlice;\n"]},"metadata":{},"sourceType":"module"}
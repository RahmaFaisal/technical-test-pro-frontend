{"ast":null,"code":"import { createAsyncThunk, createEntityAdapter, createSlice } from '@reduxjs/toolkit';\nimport config from 'config';\nimport { parseIds } from 'store/utils';\nconst SERVER_API_ENDPOINT = config.get('SERVER_API_ENDPOING', '/api');\nexport const getPractitioners = createAsyncThunk('getPractitioners', async () => {\n  const response = await fetch(`${SERVER_API_ENDPOINT}/practitioners`);\n  const parsedResponse = await response.json();\n  return parseIds(parsedResponse);\n});\nconst practitionerAdapter = createEntityAdapter({});\nexport const practitionersSelectors = practitionerAdapter.getSelectors();\nconst practitionerSlice = createSlice({\n  name: 'practitioners',\n  initialState: practitionerAdapter.getInitialState({\n    loading: false,\n    error: null,\n    filterValuePractitioner: ''\n  }),\n  reducers: {\n    filterPractitioners(state, action) {\n      state.filterValuePractitioner = action.payload;\n    }\n\n  },\n  extraReducers: builder => {\n    builder.addCase(getPractitioners.pending, state => {\n      state.loading = true;\n    });\n    builder.addCase(getPractitioners.fulfilled, (state, action) => {\n      practitionerAdapter.setAll(state, action.payload);\n      state.error = null;\n      state.loading = false;\n    });\n    builder.addCase(getPractitioners.rejected, (state, action) => {\n      state.error = action.error;\n      state.loading = false;\n    });\n  }\n});\nlet filterPractitionersAction = practitionerSlice.actions.filterPractitioners;\nexport { filterPractitionersAction };\nexport default practitionerSlice;","map":{"version":3,"sources":["/home/rahma/Documents/rahma/technical-test-pro-frontend/src/store/practitioners.ts"],"names":["createAsyncThunk","createEntityAdapter","createSlice","config","parseIds","SERVER_API_ENDPOINT","get","getPractitioners","response","fetch","parsedResponse","json","practitionerAdapter","practitionersSelectors","getSelectors","practitionerSlice","name","initialState","getInitialState","loading","error","filterValuePractitioner","reducers","filterPractitioners","state","action","payload","extraReducers","builder","addCase","pending","fulfilled","setAll","rejected","filterPractitionersAction","actions"],"mappings":"AACA,SACEA,gBADF,EAEEC,mBAFF,EAGEC,WAHF,QAIO,kBAJP;AAKA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,QAAT,QAAyB,aAAzB;AAEA,MAAMC,mBAAmB,GAAGF,MAAM,CAACG,GAAP,CAAW,qBAAX,EAAkC,MAAlC,CAA5B;AAEA,OAAO,MAAMC,gBAAgB,GAAGP,gBAAgB,CAAC,kBAAD,EAAqB,YAAY;AAC/E,QAAMQ,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEJ,mBAAoB,gBAAxB,CAA5B;AACA,QAAMK,cAAc,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAA7B;AACA,SAAOP,QAAQ,CAACM,cAAD,CAAf;AACD,CAJ+C,CAAzC;AAMP,MAAME,mBAAmB,GAAGX,mBAAmB,CAAe,EAAf,CAA/C;AAEA,OAAO,MAAMY,sBAAsB,GAAGD,mBAAmB,CAACE,YAApB,EAA/B;AAEP,MAAMC,iBAAiB,GAAGb,WAAW,CAAC;AACpCc,EAAAA,IAAI,EAAE,eAD8B;AAEpCC,EAAAA,YAAY,EAAEL,mBAAmB,CAACM,eAApB,CAAoC;AAChDC,IAAAA,OAAO,EAAE,KADuC;AAEhDC,IAAAA,KAAK,EAAE,IAFyC;AAGhDC,IAAAA,uBAAuB,EAAC;AAHwB,GAApC,CAFsB;AAOpCC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,mBAAmB,CAACC,KAAD,EAAOC,MAAP,EAAc;AAC/BD,MAAAA,KAAK,CAACH,uBAAN,GAA8BI,MAAM,CAACC,OAArC;AACD;;AAHO,GAP0B;AAYpCC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CAACC,OAAR,CAAgBtB,gBAAgB,CAACuB,OAAjC,EAA2CN,KAAD,IAAW;AACnDA,MAAAA,KAAK,CAACL,OAAN,GAAgB,IAAhB;AACD,KAFD;AAGAS,IAAAA,OAAO,CAACC,OAAR,CAAgBtB,gBAAgB,CAACwB,SAAjC,EAA4C,CAACP,KAAD,EAAQC,MAAR,KAAmB;AAC3Db,MAAAA,mBAAmB,CAACoB,MAApB,CAA2BR,KAA3B,EAAkCC,MAAM,CAACC,OAAzC;AACFF,MAAAA,KAAK,CAACJ,KAAN,GAAc,IAAd;AACAI,MAAAA,KAAK,CAACL,OAAN,GAAgB,KAAhB;AACD,KAJD;AAKAS,IAAAA,OAAO,CAACC,OAAR,CAAgBtB,gBAAgB,CAAC0B,QAAjC,EAA2C,CAACT,KAAD,EAAQC,MAAR,KAAmB;AAC5DD,MAAAA,KAAK,CAACJ,KAAN,GAAcK,MAAM,CAACL,KAArB;AACAI,MAAAA,KAAK,CAACL,OAAN,GAAgB,KAAhB;AACD,KAHD;AAID;AAzBmC,CAAD,CAArC;AA4BA,IAAIe,yBAAyB,GAACnB,iBAAiB,CAACoB,OAAlB,CAA0BZ,mBAAxD;AACA,SAASW,yBAAT;AACA,eAAenB,iBAAf","sourcesContent":["import { Practitioner } from '@prisma/client';\r\nimport {\r\n  createAsyncThunk,\r\n  createEntityAdapter,\r\n  createSlice,\r\n} from '@reduxjs/toolkit';\r\nimport config from 'config';\r\nimport { parseIds } from 'store/utils';\r\n\r\nconst SERVER_API_ENDPOINT = config.get('SERVER_API_ENDPOING', '/api');\r\n\r\nexport const getPractitioners = createAsyncThunk('getPractitioners', async () => {\r\n  const response = await fetch(`${SERVER_API_ENDPOINT}/practitioners`);\r\n  const parsedResponse = await response.json();\r\n  return parseIds(parsedResponse) as Practitioner[];\r\n});\r\n\r\nconst practitionerAdapter = createEntityAdapter<Practitioner>({});\r\n\r\nexport const practitionersSelectors = practitionerAdapter.getSelectors();\r\n\r\nconst practitionerSlice = createSlice({\r\n  name: 'practitioners',\r\n  initialState: practitionerAdapter.getInitialState({\r\n    loading: false,\r\n    error: null,\r\n    filterValuePractitioner:''\r\n  }),\r\n  reducers: {\r\n    filterPractitioners(state,action){\r\n      state.filterValuePractitioner=action.payload\r\n    }\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addCase(getPractitioners.pending, (state) => {\r\n      state.loading = true;\r\n    });\r\n    builder.addCase(getPractitioners.fulfilled, (state, action) => {\r\n        practitionerAdapter.setAll(state, action.payload);\r\n      state.error = null;\r\n      state.loading = false;\r\n    });\r\n    builder.addCase(getPractitioners.rejected, (state, action) => {\r\n      state.error = action.error;\r\n      state.loading = false;\r\n    });\r\n  },\r\n});\r\n\r\nlet filterPractitionersAction=practitionerSlice.actions.filterPractitioners\r\nexport { filterPractitionersAction }\r\nexport default practitionerSlice;\r\n"]},"metadata":{},"sourceType":"module"}
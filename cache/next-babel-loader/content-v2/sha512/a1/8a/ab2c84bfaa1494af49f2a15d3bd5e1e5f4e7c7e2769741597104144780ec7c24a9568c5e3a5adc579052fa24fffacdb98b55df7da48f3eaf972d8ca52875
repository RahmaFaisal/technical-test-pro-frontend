{"ast":null,"code":"import { createAsyncThunk, createEntityAdapter, createSlice } from '@reduxjs/toolkit';\nimport config from 'config';\nimport { parseIds } from 'store/utils';\nconst SERVER_API_ENDPOINT = config.get('SERVER_API_ENDPOING', '/api');\nexport const getAppointments = createAsyncThunk('getappointments', async () => {\n  const response = await fetch(`${SERVER_API_ENDPOINT}/appointments`);\n  const parsedResponse = await response.json();\n  return parseIds(parsedResponse);\n}); // export const addAppointment = createAsyncThunk('addAppointment', async () => {\n//     const response = await fetch(`${SERVER_API_ENDPOINT}/appointments`);\n//     const parsedResponse = await response.json();\n//     return parseIds(parsedResponse) as Patient[];\n//   });\n\nconst appointmentsAdapter = createEntityAdapter({});\nexport const appointmentsSelectors = appointmentsAdapter.getSelectors();\nconst appointmentsSlice = createSlice({\n  name: 'appointments',\n  initialState: appointmentsAdapter.getInitialState({\n    loading: false,\n    error: null,\n    filterValueAppointment: ''\n  }),\n  reducers: {\n    filterAppointment(state, action) {\n      state.filterValueAppointment = action.payload;\n    }\n\n  },\n  extraReducers: builder => {\n    builder.addCase(getAppointments.pending, state => {\n      state.loading = true;\n    });\n    builder.addCase(getAppointments.fulfilled, (state, action) => {\n      appointmentsAdapter.setAll(state, action.payload);\n      state.error = null;\n      state.loading = false;\n    });\n    builder.addCase(getAppointments.rejected, (state, action) => {\n      state.error = action.error;\n      state.loading = false;\n    });\n  }\n});\nlet filterAppointmentAction = appointmentsSlice.actions.filterAppointment;\nexport { filterAppointmentAction };\nexport default appointmentsSlice;","map":{"version":3,"sources":["/home/rahma/Documents/rahma/technical-test-pro-frontend/src/store/appointment.ts"],"names":["createAsyncThunk","createEntityAdapter","createSlice","config","parseIds","SERVER_API_ENDPOINT","get","getAppointments","response","fetch","parsedResponse","json","appointmentsAdapter","appointmentsSelectors","getSelectors","appointmentsSlice","name","initialState","getInitialState","loading","error","filterValueAppointment","reducers","filterAppointment","state","action","payload","extraReducers","builder","addCase","pending","fulfilled","setAll","rejected","filterAppointmentAction","actions"],"mappings":"AACA,SACEA,gBADF,EAEEC,mBAFF,EAGEC,WAHF,QAIO,kBAJP;AAKA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,QAAT,QAAyB,aAAzB;AAEA,MAAMC,mBAAmB,GAAGF,MAAM,CAACG,GAAP,CAAW,qBAAX,EAAkC,MAAlC,CAA5B;AAEA,OAAO,MAAMC,eAAe,GAAGP,gBAAgB,CAAC,iBAAD,EAAoB,YAAY;AAC7E,QAAMQ,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEJ,mBAAoB,eAAxB,CAA5B;AACA,QAAMK,cAAc,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAA7B;AACA,SAAOP,QAAQ,CAACM,cAAD,CAAf;AACD,CAJ8C,CAAxC,C,CAMP;AACA;AACA;AACA;AACA;;AAIA,MAAME,mBAAmB,GAAGX,mBAAmB,CAAc,EAAd,CAA/C;AAEA,OAAO,MAAMY,qBAAqB,GAAGD,mBAAmB,CAACE,YAApB,EAA9B;AAEP,MAAOC,iBAAiB,GAAGb,WAAW,CAAC;AACrCc,EAAAA,IAAI,EAAE,cAD+B;AAErCC,EAAAA,YAAY,EAAEL,mBAAmB,CAACM,eAApB,CAAoC;AAChDC,IAAAA,OAAO,EAAE,KADuC;AAEhDC,IAAAA,KAAK,EAAE,IAFyC;AAGhDC,IAAAA,sBAAsB,EAAC;AAHyB,GAApC,CAFuB;AAOrCC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,iBAAiB,CAACC,KAAD,EAAOC,MAAP,EAAc;AAC7BD,MAAAA,KAAK,CAACH,sBAAN,GAA6BI,MAAM,CAACC,OAApC;AACD;;AAHK,GAP2B;AAYrCC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CAACC,OAAR,CAAgBtB,eAAe,CAACuB,OAAhC,EAA0CN,KAAD,IAAW;AAClDA,MAAAA,KAAK,CAACL,OAAN,GAAgB,IAAhB;AACD,KAFD;AAGAS,IAAAA,OAAO,CAACC,OAAR,CAAgBtB,eAAe,CAACwB,SAAhC,EAA2C,CAACP,KAAD,EAAQC,MAAR,KAAmB;AAC1Db,MAAAA,mBAAmB,CAACoB,MAApB,CAA2BR,KAA3B,EAAkCC,MAAM,CAACC,OAAzC;AACFF,MAAAA,KAAK,CAACJ,KAAN,GAAc,IAAd;AACAI,MAAAA,KAAK,CAACL,OAAN,GAAgB,KAAhB;AACD,KAJD;AAKAS,IAAAA,OAAO,CAACC,OAAR,CAAgBtB,eAAe,CAAC0B,QAAhC,EAA0C,CAACT,KAAD,EAAQC,MAAR,KAAmB;AAC3DD,MAAAA,KAAK,CAACJ,KAAN,GAAcK,MAAM,CAACL,KAArB;AACAI,MAAAA,KAAK,CAACL,OAAN,GAAgB,KAAhB;AACD,KAHD;AAID;AAzBoC,CAAD,CAAtC;AA4BA,IAAIe,uBAAuB,GAACnB,iBAAiB,CAACoB,OAAlB,CAA0BZ,iBAAtD;AAEA,SAASW,uBAAT;AACA,eAAenB,iBAAf","sourcesContent":["import {Appointment } from '@prisma/client';\r\nimport {\r\n  createAsyncThunk,\r\n  createEntityAdapter,\r\n  createSlice,\r\n} from '@reduxjs/toolkit';\r\nimport config from 'config';\r\nimport { parseIds } from 'store/utils';\r\n\r\nconst SERVER_API_ENDPOINT = config.get('SERVER_API_ENDPOING', '/api');\r\n\r\nexport const getAppointments = createAsyncThunk('getappointments', async () => {\r\n  const response = await fetch(`${SERVER_API_ENDPOINT}/appointments`);\r\n  const parsedResponse = await response.json();\r\n  return parseIds(parsedResponse) as Appointment[];\r\n});\r\n\r\n// export const addAppointment = createAsyncThunk('addAppointment', async () => {\r\n//     const response = await fetch(`${SERVER_API_ENDPOINT}/appointments`);\r\n//     const parsedResponse = await response.json();\r\n//     return parseIds(parsedResponse) as Patient[];\r\n//   });\r\n  \r\n\r\n\r\nconst appointmentsAdapter = createEntityAdapter<Appointment>({});\r\n\r\nexport const appointmentsSelectors = appointmentsAdapter.getSelectors();\r\n\r\nconst  appointmentsSlice = createSlice({\r\n  name: 'appointments',\r\n  initialState: appointmentsAdapter.getInitialState({\r\n    loading: false,\r\n    error: null,\r\n    filterValueAppointment:''\r\n  }),\r\n  reducers: {\r\n      filterAppointment(state,action){\r\n        state.filterValueAppointment=action.payload\r\n      }\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addCase(getAppointments.pending, (state) => {\r\n      state.loading = true;\r\n    });\r\n    builder.addCase(getAppointments.fulfilled, (state, action) => {\r\n        appointmentsAdapter.setAll(state, action.payload);\r\n      state.error = null;\r\n      state.loading = false;\r\n    });\r\n    builder.addCase(getAppointments.rejected, (state, action) => {\r\n      state.error = action.error;\r\n      state.loading = false;\r\n    });\r\n  },\r\n});\r\n\r\nlet filterAppointmentAction=appointmentsSlice.actions.filterAppointment\r\n\r\nexport { filterAppointmentAction}\r\nexport default appointmentsSlice;\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { createAsyncThunk, createEntityAdapter, createSlice } from '@reduxjs/toolkit';\nimport config from 'config';\nimport { parseIds } from 'store/utils';\nconst SERVER_API_ENDPOINT = config.get('SERVER_API_ENDPOING', '/api');\nexport const getPatients = createAsyncThunk('getPatients ', async () => {\n  const response = await fetch(`${SERVER_API_ENDPOINT}/patients`);\n  const parsedResponse = await response.json();\n  return parseIds(parsedResponse);\n});\nconst patientAdapter = createEntityAdapter({});\nexport const patientsSelectors = patientAdapter.getSelectors();\nconst patientSlice = createSlice({\n  name: 'patients',\n  initialState: patientAdapter.getInitialState({\n    loading: false,\n    error: null,\n    filterPatient: ''\n  }),\n  reducers: {\n    filterPatient(state, action) {\n      state.filterPatient = action.payload;\n    }\n\n  },\n  extraReducers: builder => {\n    builder.addCase(getPatients.pending, state => {\n      state.loading = true;\n    });\n    builder.addCase(getPatients.fulfilled, (state, action) => {\n      patientAdapter.setAll(state, action.payload);\n      state.error = null;\n      state.loading = false;\n    });\n    builder.addCase(getPatients.rejected, (state, action) => {\n      state.error = action.error;\n      state.loading = false;\n    });\n  }\n});\nlet filterPatientAction = patientSlice.actions.filterPatient;\nexport { filterPatientAction };\nexport default patientSlice;","map":{"version":3,"sources":["/home/rahma/Documents/rahma/technical-test-pro-frontend/src/store/patients.ts"],"names":["createAsyncThunk","createEntityAdapter","createSlice","config","parseIds","SERVER_API_ENDPOINT","get","getPatients","response","fetch","parsedResponse","json","patientAdapter","patientsSelectors","getSelectors","patientSlice","name","initialState","getInitialState","loading","error","filterPatient","reducers","state","action","payload","extraReducers","builder","addCase","pending","fulfilled","setAll","rejected","filterPatientAction","actions"],"mappings":"AACA,SACEA,gBADF,EAEEC,mBAFF,EAGEC,WAHF,QAIO,kBAJP;AAKA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,QAAT,QAAyB,aAAzB;AAEA,MAAMC,mBAAmB,GAAGF,MAAM,CAACG,GAAP,CAAW,qBAAX,EAAkC,MAAlC,CAA5B;AAEA,OAAO,MAAMC,WAAW,GAAGP,gBAAgB,CAAC,cAAD,EAAiB,YAAY;AACtE,QAAMQ,QAAQ,GAAG,MAAMC,KAAK,CAAE,GAAEJ,mBAAoB,WAAxB,CAA5B;AACA,QAAMK,cAAc,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAA7B;AACA,SAAOP,QAAQ,CAACM,cAAD,CAAf;AACD,CAJ0C,CAApC;AAMP,MAAME,cAAc,GAAGX,mBAAmB,CAAU,EAAV,CAA1C;AAEA,OAAO,MAAMY,iBAAiB,GAAGD,cAAc,CAACE,YAAf,EAA1B;AAEP,MAAMC,YAAY,GAAGb,WAAW,CAAC;AAC/Bc,EAAAA,IAAI,EAAE,UADyB;AAE/BC,EAAAA,YAAY,EAAEL,cAAc,CAACM,eAAf,CAA+B;AAC3CC,IAAAA,OAAO,EAAE,KADkC;AAE3CC,IAAAA,KAAK,EAAE,IAFoC;AAG3CC,IAAAA,aAAa,EAAC;AAH6B,GAA/B,CAFiB;AAO/BC,EAAAA,QAAQ,EAAE;AACRD,IAAAA,aAAa,CAACE,KAAD,EAAOC,MAAP,EAAc;AACxBD,MAAAA,KAAK,CAACF,aAAN,GAAoBG,MAAM,CAACC,OAA3B;AACF;;AAHO,GAPqB;AAY/BC,EAAAA,aAAa,EAAGC,OAAD,IAAa;AAC1BA,IAAAA,OAAO,CAACC,OAAR,CAAgBrB,WAAW,CAACsB,OAA5B,EAAsCN,KAAD,IAAW;AAC9CA,MAAAA,KAAK,CAACJ,OAAN,GAAgB,IAAhB;AACD,KAFD;AAGAQ,IAAAA,OAAO,CAACC,OAAR,CAAgBrB,WAAW,CAACuB,SAA5B,EAAuC,CAACP,KAAD,EAAQC,MAAR,KAAmB;AACtDZ,MAAAA,cAAc,CAACmB,MAAf,CAAsBR,KAAtB,EAA6BC,MAAM,CAACC,OAApC;AACFF,MAAAA,KAAK,CAACH,KAAN,GAAc,IAAd;AACAG,MAAAA,KAAK,CAACJ,OAAN,GAAgB,KAAhB;AACD,KAJD;AAKAQ,IAAAA,OAAO,CAACC,OAAR,CAAgBrB,WAAW,CAACyB,QAA5B,EAAsC,CAACT,KAAD,EAAQC,MAAR,KAAmB;AACvDD,MAAAA,KAAK,CAACH,KAAN,GAAcI,MAAM,CAACJ,KAArB;AACAG,MAAAA,KAAK,CAACJ,OAAN,GAAgB,KAAhB;AACD,KAHD;AAID;AAzB8B,CAAD,CAAhC;AA2BA,IAAIc,mBAAmB,GAAClB,YAAY,CAACmB,OAAb,CAAqBb,aAA7C;AAEA,SAASY,mBAAT;AACA,eAAelB,YAAf","sourcesContent":["import { Patient  } from '@prisma/client';\r\nimport {\r\n  createAsyncThunk,\r\n  createEntityAdapter,\r\n  createSlice,\r\n} from '@reduxjs/toolkit';\r\nimport config from 'config';\r\nimport { parseIds } from 'store/utils';\r\n\r\nconst SERVER_API_ENDPOINT = config.get('SERVER_API_ENDPOING', '/api');\r\n\r\nexport const getPatients = createAsyncThunk('getPatients ', async () => {\r\n  const response = await fetch(`${SERVER_API_ENDPOINT}/patients`);\r\n  const parsedResponse = await response.json();\r\n  return parseIds(parsedResponse) as Patient[];\r\n});\r\n\r\nconst patientAdapter = createEntityAdapter<Patient>({});\r\n\r\nexport const patientsSelectors = patientAdapter.getSelectors();\r\n\r\nconst patientSlice = createSlice({\r\n  name: 'patients',\r\n  initialState: patientAdapter.getInitialState({\r\n    loading: false,\r\n    error: null,\r\n    filterPatient:''\r\n  }),\r\n  reducers: {\r\n    filterPatient(state,action){\r\n       state.filterPatient=action.payload\r\n    }\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder.addCase(getPatients.pending, (state) => {\r\n      state.loading = true;\r\n    });\r\n    builder.addCase(getPatients.fulfilled, (state, action) => {\r\n        patientAdapter.setAll(state, action.payload);\r\n      state.error = null;\r\n      state.loading = false;\r\n    });\r\n    builder.addCase(getPatients.rejected, (state, action) => {\r\n      state.error = action.error;\r\n      state.loading = false;\r\n    });\r\n  },\r\n});\r\nlet filterPatientAction=patientSlice.actions.filterPatient\r\n\r\nexport { filterPatientAction}\r\nexport default patientSlice;\r\n"]},"metadata":{},"sourceType":"module"}
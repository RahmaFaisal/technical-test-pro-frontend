{"ast":null,"code":"import { createAsyncThunk, createEntityAdapter, createSlice } from '@reduxjs/toolkit';\nimport config from 'config';\nimport { parseIds } from 'store/utils';\nconst SERVER_API_ENDPOINT = config.get('SERVER_API_ENDPOING', '/api');\nexport const getAppointments = createAsyncThunk('getappointments', async () => {\n  const response = await fetch(`${SERVER_API_ENDPOINT}/appointments`);\n  const parsedResponse = await response.json();\n  return parseIds(parsedResponse);\n}); // export const addAppointment = createAsyncThunk('addAppointment', async () => {\n//     const response = await fetch(`${SERVER_API_ENDPOINT}/appointments`);\n//     const parsedResponse = await response.json();\n//     return parseIds(parsedResponse) as Patient[];\n//   });\n\nconst appointmentsAdapter = createEntityAdapter({});\nexport const appointmentsSelectors = appointmentsAdapter.getSelectors();\nconst appointmentsSlice = createSlice({\n  name: 'appointments',\n  initialState: appointmentsAdapter.getInitialState({\n    loading: false,\n    error: null,\n    filterValueAppointment: ''\n  }),\n  reducers: {\n    filterAppointment(state, action) {\n      state.filterValueAppointment = action.payload;\n    }\n\n  },\n  extraReducers: builder => {\n    builder.addCase(getAppointments.pending, state => {\n      state.loading = true;\n    });\n    builder.addCase(getAppointments.fulfilled, (state, action) => {\n      appointmentsAdapter.setAll(state, action.payload);\n      state.error = null;\n      state.loading = false;\n    });\n    builder.addCase(getAppointments.rejected, (state, action) => {\n      state.error = action.error;\n      state.loading = false;\n    });\n  }\n});\nlet filterAppointmentAction = appointmentsSlice.actions.filterAppointment;\nexport { filterAppointmentAction };\nexport default appointmentsSlice;","map":null,"metadata":{},"sourceType":"module"}
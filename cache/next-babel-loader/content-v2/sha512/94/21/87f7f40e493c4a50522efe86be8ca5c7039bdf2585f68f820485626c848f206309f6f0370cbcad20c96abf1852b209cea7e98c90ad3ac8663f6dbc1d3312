{"ast":null,"code":"import { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useEffect, useState, useMemo } from 'react';\nimport { Checkbox, Accordion, AccordionSummary, AccordionDetails } from '@material-ui/core';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport DoneAllIcon from '@material-ui/icons/DoneAll';\n\nconst TaskList = props => {\n  const {\n    tasks,\n    name,\n    title,\n    onChange,\n    onComplete,\n    expected = props.tasks.length\n  } = props;\n  const {\n    0: localForm,\n    1: setLocalForm\n  } = useState({});\n  useEffect(() => {\n    const existingLocalForm = localStorage.getItem(name);\n\n    if (existingLocalForm) {\n      setLocalForm(JSON.parse(existingLocalForm));\n    } else {\n      localStorage.setItem(name, JSON.stringify({}));\n    }\n  }, []);\n  useEffect(() => {\n    localStorage.setItem(name, JSON.stringify(localForm));\n    onChange === null || onChange === void 0 ? void 0 : onChange();\n  }, [localForm]);\n  const numberOfAchievedTasks = useMemo(() => {\n    return Object.keys(localForm).filter(goal => localForm[goal] === true).length;\n  }, [localForm]);\n  const isAchievedAllTasks = useMemo(() => numberOfAchievedTasks >= expected, [numberOfAchievedTasks, expected]);\n  useEffect(() => {\n    onComplete === null || onComplete === void 0 ? void 0 : onComplete(isAchievedAllTasks);\n  }, [isAchievedAllTasks]);\n  return /*#__PURE__*/_jsxs(Accordion, {\n    datacy: name,\n    children: [/*#__PURE__*/_jsx(AccordionSummary, {\n      expandIcon: /*#__PURE__*/_jsx(ExpandMoreIcon, {}),\n      children: /*#__PURE__*/_jsxs(\"h3\", {\n        children: [title, ' ', /*#__PURE__*/_jsxs(\"span\", {\n          children: [numberOfAchievedTasks, \"/\", expected]\n        }), ' ', isAchievedAllTasks && /*#__PURE__*/_jsx(DoneAllIcon, {})]\n      })\n    }), /*#__PURE__*/_jsx(AccordionDetails, {\n      children: /*#__PURE__*/_jsx(\"ul\", {\n        children: tasks.map((instruction, i) => {\n          const htmlFor = `${name}-${i}`;\n          const currentValue = !!(localForm !== null && localForm !== void 0 && localForm[htmlFor]);\n          return /*#__PURE__*/_jsxs(\"li\", {\n            children: [/*#__PURE__*/_jsx(Checkbox, {\n              id: htmlFor,\n              name: htmlFor,\n              checked: currentValue,\n              onChange: () => {\n                setLocalForm(prevState => _objectSpread(_objectSpread({}, prevState), {}, {\n                  [htmlFor]: !currentValue\n                }));\n              },\n              color: \"primary\"\n            }), /*#__PURE__*/_jsx(\"label\", {\n              htmlFor: htmlFor,\n              children: instruction\n            })]\n          }, i);\n        })\n      })\n    })]\n  });\n};\n\nexport default TaskList;","map":null,"metadata":{},"sourceType":"module"}
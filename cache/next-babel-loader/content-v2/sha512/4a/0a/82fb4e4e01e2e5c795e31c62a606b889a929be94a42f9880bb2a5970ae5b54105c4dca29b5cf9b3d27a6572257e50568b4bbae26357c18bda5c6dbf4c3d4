{"ast":null,"code":"import { createDraftSafeSelector } from '@reduxjs/toolkit';\nimport { patientsSelectors } from 'store/patients';\nimport { practitionersSelectors } from 'store/practitioners';\nimport { appointmentsSelectors } from 'store/appointment';\nimport { formatDateRange } from './date';\n\nvar patients = function patients(state) {\n  return patientsSelectors.selectAll(state.patients);\n};\n\nvar filterValuePatient = function filterValuePatient(state) {\n  return state.patients.filterPatient;\n};\n\nvar filteredPatients = createDraftSafeSelector([patients, filterValuePatient], function (patients, filterValuePatient) {\n  if (filterValuePatient) {\n    var list = patients.filter(function (patient) {\n      var name = patient.firstName + patient.lastName;\n      return name.toLowerCase().includes(filterValuePatient.toLowerCase());\n    });\n    return list;\n  } else {\n    return patients;\n  }\n});\n\nvar practitioners = function practitioners(state) {\n  return practitionersSelectors.selectAll(state.practitioners);\n};\n\nvar filterValuePractitioner = function filterValuePractitioner(state) {\n  return state.practitioners.filterValuePractitioner;\n};\n\nvar filteredPractitioners = createDraftSafeSelector([practitioners, filterValuePractitioner], function (practitioners, filterValuePractitioner) {\n  console.log(filterValuePractitioner);\n\n  if (filterValuePractitioner) {\n    var list = practitioners.filter(function (_ref) {\n      var firstName = _ref.firstName,\n          lastName = _ref.lastName,\n          speciality = _ref.speciality;\n      var practValues = Object.values({\n        firstName: firstName,\n        lastName: lastName,\n        speciality: speciality\n      });\n\n      for (var i = 0; i < practValues.length; i++) {\n        if (practValues[i].toLowerCase().includes(filterValuePractitioner.toLowerCase())) {\n          return true;\n        }\n      }\n\n      return false;\n    });\n    return list;\n  } else {\n    return practitioners;\n  }\n});\n\nvar filterValueAppointment = function filterValueAppointment(state) {\n  return state.appointments.filterValueAppointment;\n};\n\nvar appointment = function appointment(state) {\n  return appointmentsSelectors.selectAll(state.appointments);\n};\n\nvar practitionersState = function practitionersState(state) {\n  return state.practitioners;\n};\n\nvar patientsState = function patientsState(state) {\n  return state.patients;\n};\n\nvar getPractitById = function getPractitById(state, id) {\n  return practitionersSelectors.selectById(state, id);\n};\n\nvar getPatientById = function getPatientById(state, id) {\n  return patientsSelectors.selectById(state, id);\n};\n\nvar filteredApointment = createDraftSafeSelector([appointment, filterValueAppointment, practitionersState, patientsState], function (appointment, filterValueAppointment, practitionersState, patientsState) {\n  if (filterValueAppointment) {\n    var list = appointment.filter(function (appoint) {\n      var _getPatientById = getPatientById(patientsState, appoint.patientId),\n          patientFirstName = _getPatientById.firstName,\n          patientlastName = _getPatientById.lastName;\n\n      var _getPractitById = getPractitById(practitionersState, appoint.practitionerId),\n          firstName = _getPractitById.firstName,\n          lastName = _getPractitById.lastName,\n          speciality = _getPractitById.speciality;\n\n      var date = formatDateRange({\n        from: new Date(appoint.startDate),\n        to: new Date(appoint.endDate)\n      });\n      var SearchObject = {\n        patientFirstName: patientFirstName,\n        patientlastName: patientlastName,\n        firstName: firstName,\n        lastName: lastName,\n        speciality: speciality,\n        date: date\n      };\n      var searchValues = Object.values(SearchObject);\n\n      for (var i = 0; i < searchValues.length; i++) {\n        if (searchValues[i].toLowerCase().includes(filterValueAppointment.toLowerCase())) {\n          return true;\n        }\n      }\n\n      return false;\n    });\n    return list;\n  } else {\n    return appointment;\n  }\n});\nexport { filteredPatients, filteredPractitioners, filteredApointment };","map":{"version":3,"sources":["/home/rahma/Documents/rahma/technical-test-pro-frontend/src/utils/filterSelector.ts"],"names":["createDraftSafeSelector","patientsSelectors","practitionersSelectors","appointmentsSelectors","formatDateRange","patients","state","selectAll","filterValuePatient","filterPatient","filteredPatients","list","filter","patient","name","firstName","lastName","toLowerCase","includes","practitioners","filterValuePractitioner","filteredPractitioners","console","log","speciality","practValues","Object","values","i","length","filterValueAppointment","appointments","appointment","practitionersState","patientsState","getPractitById","id","selectById","getPatientById","filteredApointment","appoint","patientId","patientFirstName","patientlastName","practitionerId","date","from","Date","startDate","to","endDate","SearchObject","searchValues"],"mappings":"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","sourcesContent":["import { createDraftSafeSelector } from '@reduxjs/toolkit';\r\nimport { patientsSelectors } from 'store/patients';\r\nimport { practitionersSelectors } from 'store/practitioners';\r\nimport { appointmentsSelectors } from 'store/appointment';\r\nimport { formatDateRange } from './date';\r\nimport appointments from 'api/appointments';\r\n\r\nconst patients = (state) => patientsSelectors.selectAll(state.patients);\r\nconst filterValuePatient = (state) => state.patients.filterPatient;\r\n\r\nconst filteredPatients = createDraftSafeSelector(\r\n  [patients, filterValuePatient],\r\n  (patients, filterValuePatient) => {\r\n    if (filterValuePatient) {\r\n      let list = patients.filter((patient) => {\r\n        let name = patient.firstName + patient.lastName;\r\n        return name.toLowerCase().includes(filterValuePatient.toLowerCase());\r\n      });\r\n      return list;\r\n    } else {\r\n      return patients;\r\n    }\r\n  },\r\n);\r\n\r\nconst practitioners = (state) =>\r\n  practitionersSelectors.selectAll(state.practitioners);\r\nconst filterValuePractitioner = (state) =>\r\n  state.practitioners.filterValuePractitioner;\r\n\r\nconst filteredPractitioners = createDraftSafeSelector(\r\n  [practitioners, filterValuePractitioner],\r\n  (practitioners, filterValuePractitioner) => {\r\n    console.log(filterValuePractitioner);\r\n    if (filterValuePractitioner) {\r\n      let list = practitioners.filter(({ firstName, lastName, speciality }) => {\r\n        let practValues: string[] = Object.values({\r\n          firstName,\r\n          lastName,\r\n          speciality,\r\n        });\r\n\r\n        for (let i = 0; i < practValues.length; i++) {\r\n          if (\r\n            practValues[i]\r\n              .toLowerCase()\r\n              .includes(filterValuePractitioner.toLowerCase())\r\n          ) {\r\n            return true;\r\n          }\r\n        }\r\n        return false;\r\n      });\r\n      return list;\r\n    } else {\r\n      return practitioners;\r\n    }\r\n  },\r\n);\r\n\r\nconst filterValueAppointment = (state) =>\r\n  state.appointments.filterValueAppointment;\r\nconst appointment = (state) =>\r\n  appointmentsSelectors.selectAll(state.appointments);\r\n\r\nconst practitionersState = (state) => state.practitioners;\r\nconst patientsState = (state) => state.patients;\r\n\r\nconst getPractitById = (state, id) =>\r\n  practitionersSelectors.selectById(state, id);\r\nconst getPatientById = (state, id) => patientsSelectors.selectById(state, id);\r\n\r\nconst filteredApointment = createDraftSafeSelector(\r\n  [appointment, filterValueAppointment, practitionersState, patientsState],\r\n  (appointment, filterValueAppointment, practitionersState, patientsState) => {\r\n    if (filterValueAppointment) {\r\n      let list = appointment.filter((appoint) => {\r\n        let {\r\n          firstName: patientFirstName,\r\n          lastName: patientlastName,\r\n        } = getPatientById(patientsState, appoint.patientId);\r\n\r\n        let { firstName, lastName, speciality } = getPractitById(\r\n          practitionersState,\r\n          appoint.practitionerId,\r\n        );\r\n        let date = formatDateRange({\r\n          from: new Date(appoint.startDate),\r\n          to: new Date(appoint.endDate),\r\n        });\r\n        let SearchObject = {\r\n          patientFirstName,\r\n          patientlastName,\r\n          firstName,\r\n          lastName,\r\n          speciality,\r\n          date,\r\n        };\r\n        let searchValues = Object.values(SearchObject);\r\n        for (let i = 0; i < searchValues.length; i++) {\r\n          if (\r\n            searchValues[i]\r\n              .toLowerCase()\r\n              .includes(filterValueAppointment.toLowerCase())\r\n          ) {\r\n            return true;\r\n          }\r\n        }\r\n        return false;\r\n      });\r\n\r\n      return list;\r\n    } else {\r\n      return appointment;\r\n    }\r\n  },\r\n);\r\n\r\nexport { filteredPatients, filteredPractitioners, filteredApointment };\r\n"]},"metadata":{},"sourceType":"module"}
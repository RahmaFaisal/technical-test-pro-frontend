{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/rahma/Documents/rahma/technical-test-pro-frontend/src/components/AvailabilitiesList.tsx\";\nimport React, { useEffect } from 'react';\nimport { Field, useFormikContext } from 'formik';\nimport config from 'config';\nimport { formatDateRange } from 'utils/date';\nimport { CircularProgress } from '@material-ui/core';\nconst SERVER_API_ENDPOINT = config.get('SERVER_API_ENDPOING', '/api');\nexport default function AvailabilitiesList(props) {\n  const {\n    availabilities,\n    setAvailabilities\n  } = props;\n  const formik = useFormikContext();\n\n  const getAvailabilities = async () => {\n    const response = await fetch(`${SERVER_API_ENDPOINT}/availabilities?practitionerId=${formik.values.practitionerId}`);\n    const parsedResponse = await response.json();\n    setAvailabilities(parsedResponse);\n  };\n\n  useEffect(() => {\n    setAvailabilities([]);\n    formik.setFieldValue('availabilityId', '');\n    if (formik.values.practitionerId) getAvailabilities();\n  }, [formik.values.practitionerId]);\n  let showList = availabilities.length || formik.values.practitionerId === '';\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: showList ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"avList\",\n      children: availabilities.map(availability => {\n        return /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(Field, {\n            type: \"radio\",\n            name: \"availabilityId\",\n            value: availability.id.toString()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 17\n          }, this), formatDateRange({\n            from: new Date(availability.startDate),\n            to: new Date(availability.endDate)\n          })]\n        }, availability.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 15\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(CircularProgress, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n}","map":{"version":3,"sources":["/home/rahma/Documents/rahma/technical-test-pro-frontend/src/components/AvailabilitiesList.tsx"],"names":["React","useEffect","Field","useFormikContext","config","formatDateRange","CircularProgress","SERVER_API_ENDPOINT","get","AvailabilitiesList","props","availabilities","setAvailabilities","formik","getAvailabilities","response","fetch","values","practitionerId","parsedResponse","json","setFieldValue","showList","length","map","availability","id","toString","from","Date","startDate","to","endDate"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAA2C,OAA3C;AACA,SAASC,KAAT,EAAgBC,gBAAhB,QAAwC,QAAxC;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAASC,eAAT,QAAgC,YAAhC;AAGA,SAASC,gBAAT,QAAiC,mBAAjC;AAEA,MAAMC,mBAAmB,GAAGH,MAAM,CAACI,GAAP,CAAW,qBAAX,EAAkC,MAAlC,CAA5B;AAOA,eAAe,SAASC,kBAAT,CAA4BC,KAA5B,EAA0C;AACvD,QAAM;AAAEC,IAAAA,cAAF;AAAkBC,IAAAA;AAAlB,MAAwCF,KAA9C;AACA,QAAMG,MAAM,GAAGV,gBAAgB,EAA/B;;AAEA,QAAMW,iBAAiB,GAAG,YAAY;AACpC,UAAMC,QAAQ,GAAG,MAAMC,KAAK,CACzB,GAAET,mBAAoB,kCAAiCM,MAAM,CAACI,MAAP,CAAcC,cAAe,EAD3D,CAA5B;AAGA,UAAMC,cAAc,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAA7B;AACAR,IAAAA,iBAAiB,CAACO,cAAD,CAAjB;AACD,GAND;;AAQAlB,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,iBAAiB,CAAC,EAAD,CAAjB;AACAC,IAAAA,MAAM,CAACQ,aAAP,CAAqB,gBAArB,EAAuC,EAAvC;AACA,QAAIR,MAAM,CAACI,MAAP,CAAcC,cAAlB,EAAkCJ,iBAAiB;AACpD,GAJQ,EAIN,CAACD,MAAM,CAACI,MAAP,CAAcC,cAAf,CAJM,CAAT;AAMA,MAAII,QAAQ,GAACX,cAAc,CAACY,MAAf,IAAyBV,MAAM,CAACI,MAAP,CAAcC,cAAd,KAA+B,EAArE;AACA,sBACE;AAAA,cACGI,QAAQ,gBACP;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA,gBACGX,cAAc,CAACa,GAAf,CAAoBC,YAAD,IAAkB;AACpC,4BACE;AAAA,kCACE,QAAC,KAAD;AACE,YAAA,IAAI,EAAC,OADP;AAEE,YAAA,IAAI,EAAC,gBAFP;AAGE,YAAA,KAAK,EAAEA,YAAY,CAACC,EAAb,CAAgBC,QAAhB;AAHT;AAAA;AAAA;AAAA;AAAA,kBADF,EAMGtB,eAAe,CAAC;AACfuB,YAAAA,IAAI,EAAE,IAAIC,IAAJ,CAASJ,YAAY,CAACK,SAAtB,CADS;AAEfC,YAAAA,EAAE,EAAE,IAAIF,IAAJ,CAASJ,YAAY,CAACO,OAAtB;AAFW,WAAD,CANlB;AAAA,WAAYP,YAAY,CAACC,EAAzB;AAAA;AAAA;AAAA;AAAA,gBADF;AAaD,OAdA;AADH;AAAA;AAAA;AAAA;AAAA,YADO,gBAmBP,QAAC,gBAAD;AAAA;AAAA;AAAA;AAAA;AApBJ;AAAA;AAAA;AAAA;AAAA,UADF;AAyBD","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Field, useFormikContext } from 'formik';\r\nimport config from 'config';\r\nimport { formatDateRange } from 'utils/date';\r\nimport { InitValues } from 'consts/initValues';\r\nimport { Availability } from './AppointmentForm';\r\nimport { CircularProgress } from '@material-ui/core';\r\n\r\nconst SERVER_API_ENDPOINT = config.get('SERVER_API_ENDPOING', '/api');\r\n\r\ntype Props = {\r\n  availabilities: Availability[];\r\n  setAvailabilities: (list: Availability[]) => void;\r\n};\r\n\r\nexport default function AvailabilitiesList(props: Props) {\r\n  const { availabilities, setAvailabilities } = props;\r\n  const formik = useFormikContext<InitValues>();\r\n\r\n  const getAvailabilities = async () => {\r\n    const response = await fetch(\r\n      `${SERVER_API_ENDPOINT}/availabilities?practitionerId=${formik.values.practitionerId}`,\r\n    );\r\n    const parsedResponse = await response.json();\r\n    setAvailabilities(parsedResponse);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setAvailabilities([]);\r\n    formik.setFieldValue('availabilityId', '');\r\n    if (formik.values.practitionerId) getAvailabilities();\r\n  }, [formik.values.practitionerId]);\r\n\r\n  let showList=availabilities.length || formik.values.practitionerId==='' \r\n  return (\r\n    <div>\r\n      {showList ? (\r\n        <div className=\"avList\">\r\n          {availabilities.map((availability) => {\r\n            return (\r\n              <label key={availability.id}>\r\n                <Field\r\n                  type=\"radio\"\r\n                  name=\"availabilityId\"\r\n                  value={availability.id.toString()}\r\n                />\r\n                {formatDateRange({\r\n                  from: new Date(availability.startDate),\r\n                  to: new Date(availability.endDate),\r\n                })}\r\n              </label>\r\n            );\r\n          })}\r\n        </div>\r\n      ) : (\r\n        <CircularProgress />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}
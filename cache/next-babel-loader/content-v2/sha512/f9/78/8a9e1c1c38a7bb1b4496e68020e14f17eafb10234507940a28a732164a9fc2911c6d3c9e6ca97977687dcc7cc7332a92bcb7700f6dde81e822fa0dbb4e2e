{"ast":null,"code":"import prisma from 'prisma/client';\nexport default (async (req, res) => {\n  switch (req.method) {\n    case 'GET':\n      const appointments = await prisma.appointment.findMany();\n      res.status(200).json(appointments);\n      break;\n\n    case 'POST':\n      const {\n        patientId,\n        practitionerId,\n        startDate,\n        endDate\n      } = JSON.parse(req.body);\n      const appointment = await prisma.appointment.create({\n        data: {\n          patientId: parseInt(patientId),\n          practitionerId: parseInt(practitionerId),\n          startDate: startDate,\n          endDate: endDate\n        }\n      });\n      res.status(200).json(appointment);\n      break;\n\n    case 'DELETE':\n      const {\n        id\n      } = JSON.parse(req.body);\n      await prisma.appointment.delete({\n        where: {\n          id\n        }\n      });\n      res.status(200).send('ok');\n      break;\n  }\n});","map":{"version":3,"sources":["/home/rahma/Documents/rahma/technical-test-pro-frontend/src/pages/api/appointments.ts"],"names":["prisma","req","res","method","appointments","appointment","findMany","status","json","patientId","practitionerId","startDate","endDate","JSON","parse","body","create","data","parseInt","id","delete","where","send"],"mappings":"AACA,OAAOA,MAAP,MAAmB,eAAnB;AAEA,gBAAe,OAAOC,GAAP,EAA4BC,GAA5B,KAAqD;AAClE,UAAQD,GAAG,CAACE,MAAZ;AACE,SAAK,KAAL;AACE,YAAMC,YAAY,GAAG,MAAMJ,MAAM,CAACK,WAAP,CAAmBC,QAAnB,EAA3B;AACAJ,MAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBJ,YAArB;AACA;;AACF,SAAK,MAAL;AACE,YAAM;AAAEK,QAAAA,SAAF;AAAaC,QAAAA,cAAb;AAA6BC,QAAAA,SAA7B;AAAwCC,QAAAA;AAAxC,UAAoDC,IAAI,CAACC,KAAL,CACxDb,GAAG,CAACc,IADoD,CAA1D;AAGA,YAAMV,WAAW,GAAG,MAAML,MAAM,CAACK,WAAP,CAAmBW,MAAnB,CAA0B;AAClDC,QAAAA,IAAI,EAAE;AACJR,UAAAA,SAAS,EAAES,QAAQ,CAACT,SAAD,CADf;AAEJC,UAAAA,cAAc,EAAEQ,QAAQ,CAACR,cAAD,CAFpB;AAGJC,UAAAA,SAAS,EAAEA,SAHP;AAIJC,UAAAA,OAAO,EAAEA;AAJL;AAD4C,OAA1B,CAA1B;AAQAV,MAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBH,WAArB;AACA;;AACF,SAAK,QAAL;AACE,YAAM;AAAEc,QAAAA;AAAF,UAASN,IAAI,CAACC,KAAL,CAAWb,GAAG,CAACc,IAAf,CAAf;AACA,YAAMf,MAAM,CAACK,WAAP,CAAmBe,MAAnB,CAA0B;AAC9BC,QAAAA,KAAK,EAAE;AACLF,UAAAA;AADK;AADuB,OAA1B,CAAN;AAKAjB,MAAAA,GAAG,CAACK,MAAJ,CAAW,GAAX,EAAgBe,IAAhB,CAAqB,IAArB;AACA;AA3BJ;AA6BD,CA9BD","sourcesContent":["import type { NextApiRequest, NextApiResponse } from 'next';\r\nimport prisma from 'prisma/client';\r\n\r\nexport default async (req: NextApiRequest, res: NextApiResponse) => {\r\n  switch (req.method) {\r\n    case 'GET':\r\n      const appointments = await prisma.appointment.findMany();\r\n      res.status(200).json(appointments);\r\n      break;\r\n    case 'POST':\r\n      const { patientId, practitionerId, startDate, endDate } = JSON.parse(\r\n        req.body,\r\n      );\r\n      const appointment = await prisma.appointment.create({\r\n        data: {\r\n          patientId: parseInt(patientId),\r\n          practitionerId: parseInt(practitionerId),\r\n          startDate: startDate,\r\n          endDate: endDate,\r\n        },\r\n      });\r\n      res.status(200).json(appointment);\r\n      break;\r\n    case 'DELETE':\r\n      const { id } = JSON.parse(req.body);\r\n      await prisma.appointment.delete({\r\n        where: {\r\n          id,\r\n        },\r\n      });\r\n      res.status(200).send('ok');\r\n      break;\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}
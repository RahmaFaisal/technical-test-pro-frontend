{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/rahma/Documents/rahma/technical-test-pro-frontend/src/components/TaskList.tsx\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { useEffect, useState, useMemo } from 'react';\nimport { Checkbox, Accordion, AccordionSummary, AccordionDetails } from '@material-ui/core';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport DoneAllIcon from '@material-ui/icons/DoneAll';\n\nconst TaskList = props => {\n  const {\n    tasks,\n    name,\n    title,\n    onChange,\n    onComplete,\n    expected = props.tasks.length\n  } = props;\n  const {\n    0: localForm,\n    1: setLocalForm\n  } = useState({});\n  useEffect(() => {\n    const existingLocalForm = localStorage.getItem(name);\n\n    if (existingLocalForm) {\n      setLocalForm(JSON.parse(existingLocalForm));\n    } else {\n      localStorage.setItem(name, JSON.stringify({}));\n    }\n  }, []);\n  useEffect(() => {\n    localStorage.setItem(name, JSON.stringify(localForm));\n    onChange === null || onChange === void 0 ? void 0 : onChange();\n  }, [localForm]);\n  const numberOfAchievedTasks = useMemo(() => {\n    return Object.keys(localForm).filter(goal => localForm[goal] === true).length;\n  }, [localForm]);\n  const isAchievedAllTasks = useMemo(() => numberOfAchievedTasks >= expected, [numberOfAchievedTasks, expected]);\n  useEffect(() => {\n    onComplete === null || onComplete === void 0 ? void 0 : onComplete(isAchievedAllTasks);\n  }, [isAchievedAllTasks]);\n  return /*#__PURE__*/_jsxDEV(Accordion, {\n    datacy: name,\n    children: [/*#__PURE__*/_jsxDEV(AccordionSummary, {\n      expandIcon: /*#__PURE__*/_jsxDEV(ExpandMoreIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 37\n      }, this),\n      children: /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [title, ' ', /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [numberOfAchievedTasks, \"/\", expected]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this), ' ', isAchievedAllTasks && /*#__PURE__*/_jsxDEV(DoneAllIcon, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 34\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AccordionDetails, {\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: tasks.map((instruction, i) => {\n          const htmlFor = `${name}-${i}`;\n          const currentValue = !!(localForm !== null && localForm !== void 0 && localForm[htmlFor]);\n          return /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [/*#__PURE__*/_jsxDEV(Checkbox, {\n              id: htmlFor,\n              name: htmlFor,\n              checked: currentValue,\n              onChange: () => {\n                setLocalForm(prevState => _objectSpread(_objectSpread({}, prevState), {}, {\n                  [htmlFor]: !currentValue\n                }));\n              },\n              color: \"primary\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 77,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: htmlFor,\n              children: instruction\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 17\n            }, this)]\n          }, i, true, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 5\n  }, this);\n};\n\nexport default TaskList;","map":{"version":3,"sources":["/home/rahma/Documents/rahma/technical-test-pro-frontend/src/components/TaskList.tsx"],"names":["useEffect","useState","useMemo","Checkbox","Accordion","AccordionSummary","AccordionDetails","ExpandMoreIcon","DoneAllIcon","TaskList","props","tasks","name","title","onChange","onComplete","expected","length","localForm","setLocalForm","existingLocalForm","localStorage","getItem","JSON","parse","setItem","stringify","numberOfAchievedTasks","Object","keys","filter","goal","isAchievedAllTasks","map","instruction","i","htmlFor","currentValue","prevState"],"mappings":"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","sourcesContent":["import { useEffect, useState, useMemo } from 'react';\nimport {\n  Checkbox,\n  Accordion,\n  AccordionSummary,\n  AccordionDetails,\n} from '@material-ui/core';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport DoneAllIcon from '@material-ui/icons/DoneAll';\n\ntype Props = {\n  tasks: string[];\n  name: string;\n  title: string;\n  expected?: number;\n  onChange?: () => void;\n  onComplete?: (value: boolean) => void;\n};\n\nconst TaskList = (props: Props) => {\n  const {\n    tasks,\n    name,\n    title,\n    onChange,\n    onComplete,\n    expected = props.tasks.length,\n  } = props;\n  const [localForm, setLocalForm] = useState({});\n\n  useEffect(() => {\n    const existingLocalForm = localStorage.getItem(name);\n    if (existingLocalForm) {\n      setLocalForm(JSON.parse(existingLocalForm));\n    } else {\n      localStorage.setItem(name, JSON.stringify({}));\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(name, JSON.stringify(localForm));\n    onChange?.();\n  }, [localForm]);\n\n  const numberOfAchievedTasks = useMemo(() => {\n    return Object.keys(localForm).filter((goal) => localForm[goal] === true)\n      .length;\n  }, [localForm]);\n\n  const isAchievedAllTasks = useMemo(() => numberOfAchievedTasks >= expected, [\n    numberOfAchievedTasks,\n    expected,\n  ]);\n\n  useEffect(() => {\n    onComplete?.(isAchievedAllTasks);\n  }, [isAchievedAllTasks]);\n\n  return (\n    <Accordion datacy={name}>\n      <AccordionSummary expandIcon={<ExpandMoreIcon />}>\n        <h3>\n          {title}{' '}\n          <span>\n            {numberOfAchievedTasks}/{expected}\n          </span>{' '}\n          {isAchievedAllTasks && <DoneAllIcon />}\n        </h3>\n      </AccordionSummary>\n      <AccordionDetails>\n        <ul>\n          {tasks.map((instruction, i) => {\n            const htmlFor = `${name}-${i}`;\n            const currentValue = !!localForm?.[htmlFor];\n            return (\n              <li key={i}>\n                <Checkbox\n                  id={htmlFor}\n                  name={htmlFor}\n                  checked={currentValue}\n                  onChange={() => {\n                    setLocalForm((prevState) => ({\n                      ...prevState,\n                      [htmlFor]: !currentValue,\n                    }));\n                  }}\n                  color=\"primary\"\n                />\n                <label htmlFor={htmlFor}>{instruction}</label>\n              </li>\n            );\n          })}\n        </ul>\n      </AccordionDetails>\n    </Accordion>\n  );\n};\n\nexport default TaskList;\n"]},"metadata":{},"sourceType":"module"}
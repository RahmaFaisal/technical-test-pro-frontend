{"ast":null,"code":"import { createAsyncThunk, createEntityAdapter, createSlice } from '@reduxjs/toolkit';\nimport config from 'config';\nimport { parseIds } from 'store/utils';\nconst SERVER_API_ENDPOINT = config.get('SERVER_API_ENDPOING', '/api');\nexport const getTimeSlots = createAsyncThunk('getTimeSlots', async () => {\n  const response = await fetch(`${SERVER_API_ENDPOINT}/timeslots`);\n  const parsedResponse = await response.json();\n  return parseIds(parsedResponse);\n});\nconst timeslotsAdapter = createEntityAdapter({\n  sortComparer: (a, b) => new Date(a.startDate).getTime() - new Date(b.startDate).getTime()\n});\nexport const timeslotsSelectors = timeslotsAdapter.getSelectors();\nconst timeslotsSlice = createSlice({\n  name: 'timeslots',\n  initialState: timeslotsAdapter.getInitialState({\n    loading: false,\n    error: null\n  }),\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(getTimeSlots.pending, state => {\n      state.loading = true;\n    });\n    builder.addCase(getTimeSlots.fulfilled, (state, action) => {\n      timeslotsAdapter.setAll(state, action.payload);\n      state.error = null;\n      state.loading = false;\n    });\n    builder.addCase(getTimeSlots.rejected, (state, action) => {\n      state.error = action.error;\n      state.loading = false;\n    });\n  }\n});\nexport default timeslotsSlice;","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import prisma from 'prisma/client';\nexport default (async (req, res) => {\n  const availabilities = await prisma.availability.findMany({\n    where: {\n      practitionerId: +req.query.practitionerId\n    }\n  });\n  res.status(200).json(availabilities);\n});","map":{"version":3,"sources":["/home/rahma/Documents/rahma/technical-test-pro-frontend/src/pages/api/availabilities.ts"],"names":["prisma","req","res","availabilities","availability","findMany","where","practitionerId","query","status","json"],"mappings":"AACA,OAAOA,MAAP,MAAmB,eAAnB;AAEA,gBAAe,OAAOC,GAAP,EAA4BC,GAA5B,KAAqD;AAClE,QAAMC,cAAc,GAAG,MAAMH,MAAM,CAACI,YAAP,CAAoBC,QAApB,CAA6B;AACxDC,IAAAA,KAAK,EAAE;AAAEC,MAAAA,cAAc,EAAE,CAACN,GAAG,CAACO,KAAJ,CAAUD;AAA7B;AADiD,GAA7B,CAA7B;AAIAL,EAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBP,cAArB;AACD,CAND","sourcesContent":["import type { NextApiRequest, NextApiResponse } from 'next';\nimport prisma from 'prisma/client';\n\nexport default async (req: NextApiRequest, res: NextApiResponse) => {\n  const availabilities = await prisma.availability.findMany({\n    where: { practitionerId: +req.query.practitionerId },\n  });\n\n  res.status(200).json(availabilities);\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/rahma/Documents/rahma/technical-test-pro-frontend/src/components/AppointmentForm.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Formik, Field, Form, ErrorMessage } from 'formik';\nimport { initValues } from 'consts/initValues';\nimport { filterPractitionersAction, getPractitioners } from 'store/practitioners';\nimport { Button, FormControl, Grid, InputLabel, OutlinedInput } from '@material-ui/core';\nimport SearchIcon from '@material-ui/icons/Search';\nimport Alert from '@material-ui/lab/Alert';\nimport { filterPatientAction, getPatients } from 'store/patients';\nimport { AppointmentSchema } from 'consts/validationSchema';\nimport { addAppointment, getAppointmentRequest } from 'utils/formatAppointmentRequest';\nimport { getAppointments } from 'store/appointment';\nimport AvailabilitiesList from './AvailabilitiesList';\nimport { filteredPatients, filteredPractitioners } from 'utils/filterSelector';\n\nvar AppointmentForm = function AppointmentForm() {\n  _s();\n\n  var dispatch = useDispatch();\n  var state = useSelector(function (state) {\n    return state;\n  });\n  var practitioners = filteredPractitioners(state);\n  var patients = filteredPatients(state);\n\n  var _useState = useState([]),\n      availabilities = _useState[0],\n      setAvailabilities = _useState[1];\n\n  var _useState2 = useState(false),\n      showSuccess = _useState2[0],\n      setShowSuccess = _useState2[1];\n\n  useEffect(function () {\n    dispatch(getPractitioners());\n    dispatch(getPatients());\n  }, []);\n  useEffect(function () {\n    var hideAlert;\n\n    if (showSuccess) {\n      hideAlert = setTimeout(function () {\n        setShowSuccess(false);\n      }, 2000);\n    }\n\n    return function () {\n      clearTimeout(hideAlert);\n    };\n  }, [showSuccess]);\n\n  var PractitionersList = function PractitionersList() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: practitioners.map(function (practitioner) {\n        return /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(Field, {\n            type: \"radio\",\n            name: \"practitionerId\",\n            value: practitioner.id.toString()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 15\n          }, _this), \"\".concat(practitioner.firstName, \" \").concat(practitioner.lastName, \"  (\").concat(practitioner.speciality, \")\")]\n        }, practitioner.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, _this);\n      })\n    }, void 0, false);\n  };\n\n  var PatientsList = function PatientsList() {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: patients.map(function (patient) {\n        return /*#__PURE__*/_jsxDEV(\"label\", {\n          children: [/*#__PURE__*/_jsxDEV(Field, {\n            type: \"radio\",\n            name: \"patientId\",\n            value: patient.id.toString()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 15\n          }, _this), \"\".concat(patient.firstName, \" (\").concat(patient.lastName, \")\")]\n        }, patient.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 13\n        }, _this);\n      })\n    }, void 0, false);\n  };\n\n  var updateAppointmentList = function updateAppointmentList() {\n    setShowSuccess(true);\n    setAvailabilities([]);\n    dispatch(getAppointments());\n  };\n\n  var onSubmit = function onSubmit(values, _ref) {\n    var resetForm = _ref.resetForm;\n    var availabilityId = values.availabilityId,\n        patientId = values.patientId,\n        practitionerId = values.practitionerId;\n\n    var _availabilities$find = availabilities.find(function (date) {\n      return date.id == Number(availabilityId);\n    }),\n        endDate = _availabilities$find.endDate,\n        startDate = _availabilities$find.startDate;\n\n    resetForm();\n    var body = getAppointmentRequest({\n      patientId: patientId,\n      practitionerId: practitionerId,\n      startDate: startDate,\n      endDate: endDate\n    });\n    addAppointment(body, updateAppointmentList);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: 50,\n        width: '90%',\n        margin: 'auto'\n      },\n      children: showSuccess && /*#__PURE__*/_jsxDEV(Alert, {\n        onClose: function onClose() {\n          return setShowSuccess(false);\n        },\n        severity: \"success\",\n        children: \"Appointment added successfully\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 133,\n        columnNumber: 11\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(Formik, {\n      initialValues: initValues,\n      onSubmit: onSubmit,\n      validationSchema: AppointmentSchema,\n      children: /*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"_form\",\n          children: [/*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            direction: \"column\",\n            className: \"list\",\n            id: \"patientlist\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"title\",\n              children: [\"Patient List\", /*#__PURE__*/_jsxDEV(ErrorMessage, {\n                component: \"span\",\n                name: \"patientId\",\n                className: \"error\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 153,\n                columnNumber: 17\n              }, _this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 15\n            }, _this), /*#__PURE__*/_jsxDEV(FormControl, {\n              size: \"small\",\n              variant: \"outlined\",\n              style: {\n                width: '70%',\n                margin: '10px 0'\n              },\n              children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n                htmlFor: \"outlined-adornment-amount\",\n                children: \"Patient Name\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 165,\n                columnNumber: 17\n              }, _this), /*#__PURE__*/_jsxDEV(OutlinedInput, {\n                id: \"outlined-adornment-amount\",\n                onChange: function onChange(e) {\n                  dispatch(filterPatientAction(e.target.value));\n                },\n                startAdornment: /*#__PURE__*/_jsxDEV(SearchIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 173,\n                  columnNumber: 35\n                }, _this),\n                labelWidth: 100\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 168,\n                columnNumber: 17\n              }, _this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 160,\n              columnNumber: 15\n            }, _this), /*#__PURE__*/_jsxDEV(PatientsList, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 178,\n              columnNumber: 15\n            }, _this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 145,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            direction: \"column\",\n            className: \"list\",\n            id: \"practitionerlist\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"title\",\n              children: [\"Practitioner List\", /*#__PURE__*/_jsxDEV(ErrorMessage, {\n                component: \"span\",\n                name: \"practitionerId\",\n                className: \"error\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 189,\n                columnNumber: 17\n              }, _this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 187,\n              columnNumber: 15\n            }, _this), /*#__PURE__*/_jsxDEV(FormControl, {\n              size: \"small\",\n              variant: \"outlined\",\n              style: {\n                width: '70%',\n                margin: '10px 0'\n              },\n              children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n                htmlFor: \"outlined-adornment-amount\",\n                children: \"Practitioner/speciality\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 201,\n                columnNumber: 17\n              }, _this), /*#__PURE__*/_jsxDEV(OutlinedInput, {\n                id: \"outlined-adornment-amount\",\n                onChange: function onChange(e) {\n                  dispatch(filterPractitionersAction(e.target.value));\n                },\n                startAdornment: /*#__PURE__*/_jsxDEV(SearchIcon, {}, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 209,\n                  columnNumber: 35\n                }, _this),\n                labelWidth: 170\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 204,\n                columnNumber: 17\n              }, _this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 196,\n              columnNumber: 15\n            }, _this), /*#__PURE__*/_jsxDEV(PractitionersList, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 15\n            }, _this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            direction: \"column\",\n            className: \"list\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              className: \"title\",\n              children: [\"Appointments List\", /*#__PURE__*/_jsxDEV(ErrorMessage, {\n                component: \"span\",\n                name: \"availabilityId\",\n                className: \"error\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 220,\n                columnNumber: 17\n              }, _this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 218,\n              columnNumber: 15\n            }, _this), /*#__PURE__*/_jsxDEV(AvailabilitiesList, {\n              availabilities: availabilities,\n              setAvailabilities: setAvailabilities\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 226,\n              columnNumber: 15\n            }, _this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 217,\n            columnNumber: 13\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(Grid, {\n          container: true,\n          justify: \"center\",\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            type: \"submit\",\n            variant: \"contained\",\n            className: \"btn\",\n            color: \"primary\",\n            size: \"medium\",\n            children: \"Book\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 233,\n            columnNumber: 13\n          }, _this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 11\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, _this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 130,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(AppointmentForm, \"WzSpjdj3IsYSz7D9Y9jzEEe6GuU=\", false, function () {\n  return [useDispatch, useSelector];\n});\n\n_c = AppointmentForm;\nexport default AppointmentForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"AppointmentForm\");","map":{"version":3,"sources":["/home/rahma/Documents/rahma/technical-test-pro-frontend/src/components/AppointmentForm.tsx"],"names":["useEffect","useState","useDispatch","useSelector","Formik","Field","Form","ErrorMessage","initValues","filterPractitionersAction","getPractitioners","Button","FormControl","Grid","InputLabel","OutlinedInput","SearchIcon","Alert","filterPatientAction","getPatients","AppointmentSchema","addAppointment","getAppointmentRequest","getAppointments","AvailabilitiesList","filteredPatients","filteredPractitioners","AppointmentForm","dispatch","state","practitioners","patients","availabilities","setAvailabilities","showSuccess","setShowSuccess","hideAlert","setTimeout","clearTimeout","PractitionersList","map","practitioner","id","toString","firstName","lastName","speciality","PatientsList","patient","updateAppointmentList","onSubmit","values","resetForm","availabilityId","patientId","practitionerId","find","date","Number","endDate","startDate","body","height","width","margin","e","target","value"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react';\nimport EditorLink from './EditorLink';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Formik, Field, Form, FormikHelpers, ErrorMessage } from 'formik';\nimport { InitValues, initValues } from 'consts/initValues';\nimport {\n  filterPractitionersAction,\n  getPractitioners,\n  practitionersSelectors,\n} from 'store/practitioners';\nimport {\n  Button,\n  FormControl,\n  Grid,\n  InputLabel,\n  OutlinedInput,\n} from '@material-ui/core';\nimport SearchIcon from '@material-ui/icons/Search';\nimport Alert from '@material-ui/lab/Alert';\nimport {\n  filterPatientAction,\n  getPatients,\n  patientsSelectors,\n} from 'store/patients';\nimport { AppointmentSchema } from 'consts/validationSchema';\nimport {\n  addAppointment,\n  getAppointmentRequest,\n} from 'utils/formatAppointmentRequest';\nimport { getAppointments } from 'store/appointment';\nimport AvailabilitiesList from './AvailabilitiesList';\nimport { filteredPatients, filteredPractitioners } from 'utils/filterSelector';\n\nexport type Availability = {\n  id: number;\n  practitionerId: number;\n  startDate: string;\n  endDate: string;\n};\n\nconst AppointmentForm = () => {\n  const dispatch = useDispatch();\n\n  const state = useSelector((state) => state);\n  const practitioners = filteredPractitioners(state);\n  const patients = filteredPatients(state);\n\n  const [availabilities, setAvailabilities] = useState<Availability[]>([]);\n\n  const [showSuccess, setShowSuccess] = useState(false);\n\n  useEffect(() => {\n    dispatch(getPractitioners());\n    dispatch(getPatients());\n  }, []);\n\n  useEffect(() => {\n    let hideAlert;\n    if (showSuccess) {\n      hideAlert = setTimeout(() => {\n        setShowSuccess(false);\n      }, 2000);\n    }\n\n    return () => {\n      clearTimeout(hideAlert);\n    };\n  }, [showSuccess]);\n\n  const PractitionersList = () => {\n    return (\n      <>\n        {practitioners.map((practitioner) => {\n          return (\n            <label key={practitioner.id}>\n              <Field\n                type=\"radio\"\n                name=\"practitionerId\"\n                value={practitioner.id.toString()}\n              />\n              {`${practitioner.firstName} ${practitioner.lastName}  (${practitioner.speciality})`}\n            </label>\n          );\n        })}\n      </>\n    );\n  };\n\n  const PatientsList = () => {\n    return (\n      <>\n        {patients.map((patient) => {\n          return (\n            <label key={patient.id}>\n              <Field\n                type=\"radio\"\n                name=\"patientId\"\n                value={patient.id.toString()}\n              />\n              {`${patient.firstName} (${patient.lastName})`}\n            </label>\n          );\n        })}\n      </>\n    );\n  };\n\n  const updateAppointmentList = () => {\n    setShowSuccess(true);\n    setAvailabilities([]);\n    dispatch(getAppointments());\n  };\n\n  const onSubmit = (values: InitValues, { resetForm }) => {\n    let { availabilityId, patientId, practitionerId } = values;\n    let { endDate, startDate } = availabilities.find(\n      (date) => date.id == Number(availabilityId),\n    );\n    resetForm();\n    let body = getAppointmentRequest({\n      patientId,\n      practitionerId,\n      startDate,\n      endDate,\n    });\n    addAppointment(body, updateAppointmentList);\n  };\n\n  return (\n    <div>\n      <div style={{ height: 50, width: '90%', margin: 'auto' }}>\n        {showSuccess && (\n          <Alert onClose={() => setShowSuccess(false)} severity=\"success\">\n            Appointment added successfully\n          </Alert>\n        )}\n      </div>\n      <Formik\n        initialValues={initValues}\n        onSubmit={onSubmit}\n        validationSchema={AppointmentSchema}\n      >\n        <Form>\n          <div className=\"_form\">\n            <Grid\n              container\n              direction=\"column\"\n              className=\"list\"\n              id=\"patientlist\"\n            >\n              <p className=\"title\">\n                Patient List\n                <ErrorMessage\n                  component=\"span\"\n                  name=\"patientId\"\n                  className=\"error\"\n                />\n              </p>\n\n              <FormControl\n                size=\"small\"\n                variant=\"outlined\"\n                style={{ width: '70%', margin: '10px 0' }}\n              >\n                <InputLabel htmlFor=\"outlined-adornment-amount\">\n                  Patient Name\n                </InputLabel>\n                <OutlinedInput\n                  id=\"outlined-adornment-amount\"\n                  onChange={(e) => {\n                    dispatch(filterPatientAction(e.target.value));\n                  }}\n                  startAdornment={<SearchIcon />}\n                  labelWidth={100}\n                />\n              </FormControl>\n\n              <PatientsList />\n            </Grid>\n\n            <Grid\n              container\n              direction=\"column\"\n              className=\"list\"\n              id=\"practitionerlist\"\n            >\n              <p className=\"title\">\n                Practitioner List\n                <ErrorMessage\n                  component=\"span\"\n                  name=\"practitionerId\"\n                  className=\"error\"\n                />\n              </p>\n\n              <FormControl\n                size=\"small\"\n                variant=\"outlined\"\n                style={{ width: '70%', margin: '10px 0' }}\n              >\n                <InputLabel htmlFor=\"outlined-adornment-amount\">\n                  Practitioner/speciality\n                </InputLabel>\n                <OutlinedInput\n                  id=\"outlined-adornment-amount\"\n                  onChange={(e) => {\n                    dispatch(filterPractitionersAction(e.target.value));\n                  }}\n                  startAdornment={<SearchIcon />}\n                  labelWidth={170}\n                />\n              </FormControl>\n\n              <PractitionersList />\n            </Grid>\n\n            <Grid container direction=\"column\" className=\"list\">\n              <p className=\"title\">\n                Appointments List\n                <ErrorMessage\n                  component=\"span\"\n                  name=\"availabilityId\"\n                  className=\"error\"\n                />\n              </p>\n              <AvailabilitiesList\n                availabilities={availabilities}\n                setAvailabilities={setAvailabilities}\n              />\n            </Grid>\n          </div>\n          <Grid container justify=\"center\">\n            <Button\n              type=\"submit\"\n              variant=\"contained\"\n              className=\"btn\"\n              color=\"primary\"\n              size=\"medium\"\n            >\n              Book\n            </Button>\n          </Grid>\n        </Form>\n      </Formik>\n    </div>\n  );\n};\n\nexport default AppointmentForm;\n"]},"metadata":{},"sourceType":"module"}